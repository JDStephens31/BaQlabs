{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a professional-grade backtesting engine for algorithmic trading strategies. The application provides a comprehensive platform for developing, testing, and analyzing trading algorithms with realistic market simulation capabilities. It features a sophisticated web interface with multiple specialized tabs for strategy development, market data replay, performance analysis, queue position tracking, latency modeling, and machine learning integration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with React using TypeScript and follows a modern component-based architecture. Key decisions include:\n\n- **UI Framework**: Uses shadcn/ui components built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with a monochrome design theme (black/white/grays) optimized for professional trading environments\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Layout Pattern**: Professional trading interface with fixed layout sections (top bar, left sidebar, main content, right inspector, console log)\n\n## Backend Architecture\nThe server uses Express.js with WebSocket support for real-time features:\n\n- **API Design**: RESTful endpoints for CRUD operations on strategies, datasets, backtest runs, and trades\n- **Real-time Communication**: WebSocket server for live market data simulation and backtest progress updates\n- **Data Validation**: Zod schemas shared between client and server for type safety\n- **Storage Abstraction**: IStorage interface allowing pluggable storage implementations (currently in-memory with database-ready schema)\n\n## Data Storage Solutions\nThe application is designed for PostgreSQL with Drizzle ORM:\n\n- **ORM Choice**: Drizzle ORM for type-safe database operations with minimal runtime overhead\n- **Schema Design**: Normalized schema with separate tables for strategies, datasets, backtest runs, trades, and market data\n- **Migration Strategy**: Drizzle Kit for schema migrations and database evolution\n- **Current Implementation**: In-memory storage for development with production-ready PostgreSQL schema\n\n## Key Features Architecture\n\n### Strategy Development\n- **Code Editor**: Monospaced editor with syntax highlighting for JavaScript-based trading strategies\n- **Parameter Configuration**: Dynamic form-based parameter management with validation\n- **Compilation Pipeline**: Real-time strategy validation and compilation feedback\n\n### Market Data Simulation\n- **MBO (Market By Order) Replay**: Granular order book reconstruction from historical data\n- **Queue Position Tracking**: Realistic order queue simulation with rank tracking\n- **Latency Modeling**: Configurable latency profiles (Gaussian, uniform, exponential) for realistic execution simulation\n\n### Performance Analytics\n- **Real-time Charting**: Custom canvas-based charting for equity curves and performance metrics\n- **Risk Metrics**: Comprehensive calculation of Sharpe ratio, maximum drawdown, hit rates, and profit factors\n- **Trade Analysis**: Detailed trade-by-trade breakdown with slippage and queue position data\n\n### WebSocket Integration\n- **Live Updates**: Real-time market data streaming and backtest progress updates\n- **Bidirectional Communication**: Client can send commands (start/stop backtests) via WebSocket\n- **Connection Management**: Automatic reconnection handling and connection state monitoring\n\n## Design Patterns\n\n### Component Organization\n- **Atomic Design**: UI components organized from basic atoms (inputs, buttons) to complex organisms (full tabs)\n- **Tab-based Architecture**: Main content area uses tab switching pattern for different analysis modes\n- **Provider Pattern**: React Context for global state (toast notifications, theming)\n\n### Data Flow\n- **Unidirectional Data Flow**: Props down, events up pattern throughout the component hierarchy\n- **Server State Caching**: TanStack Query handles caching, background updates, and optimistic updates\n- **WebSocket State**: Separate hook (useWebSocket) manages real-time connection state\n\n# External Dependencies\n\n## Core Technologies\n- **React 18**: Frontend framework with modern hooks and concurrent features\n- **TypeScript**: Type safety throughout the entire stack\n- **Node.js/Express**: Backend runtime and web framework\n- **Vite**: Modern build tool and development server\n\n## Database & ORM\n- **PostgreSQL**: Production database (configured via DATABASE_URL environment variable)\n- **Drizzle ORM**: Type-safe database operations and schema management\n- **@neondatabase/serverless**: Serverless-optimized PostgreSQL driver\n\n## UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives\n- **Lucide Icons**: Consistent icon system\n- **Inter & JetBrains Mono**: Professional typography (sans-serif and monospace)\n\n## Real-time Features\n- **WebSocket (ws)**: Native WebSocket implementation for real-time communication\n- **TanStack Query**: Server state management and caching\n\n## Development Tools\n- **Vite Plugins**: Runtime error overlay and development enhancements\n- **ESBuild**: Fast bundling for production builds\n- **TSX**: TypeScript execution for development server\n\n## Trading-Specific Libraries\nThe application is designed to integrate with financial data providers and trading APIs, though specific integrations are abstracted behind the storage interface for flexibility.","size_bytes":5565},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertStrategySchema, insertBacktestRunSchema } from \"@shared/schema\";\n\n// Simulated backtest execution with NQ futures data\nasync function runBacktestWithProgress(strategyId: string, datasetId: string, ws: WebSocket) {\n  try {\n    // Get strategy and dataset\n    const strategy = await storage.getStrategy(strategyId);\n    const dataset = await storage.getDataset(datasetId);\n    \n    if (!strategy || !dataset) {\n      ws.send(JSON.stringify({\n        type: 'backtestError',\n        data: { message: 'Strategy or dataset not found' }\n      }));\n      return;\n    }\n\n    // Create backtest run record\n    const backtestRun = await storage.createBacktestRun({\n      strategyId,\n      datasetId,\n      status: 'running',\n      results: null\n    });\n\n    // Generate NQ market data starting at 23713\n    const marketData = generateNQMarketData();\n    const totalEvents = marketData.length;\n    \n    // Simulate backtest execution with progress updates\n    let processedEvents = 0;\n    let position = 0;\n    let capital = 100000;\n    const trades: any[] = [];\n    const basePrice = 23713;\n    \n    // Process market data in chunks\n    const chunkSize = Math.ceil(totalEvents / 20); // 20 progress updates\n    \n    for (let i = 0; i < totalEvents; i += chunkSize) {\n      if (ws.readyState !== WebSocket.OPEN) break;\n      \n      const chunk = marketData.slice(i, Math.min(i + chunkSize, totalEvents));\n      \n      // Process this chunk\n      for (const dataPoint of chunk) {\n        // Simple trading logic for demonstration\n        if (Math.random() > 0.98) { // Random trade generation\n          const side = Math.random() > 0.5 ? 'BUY' : 'SELL';\n          const price = basePrice + (Math.random() - 0.5) * 10;\n          const size = 1;\n          const pnl = (Math.random() - 0.4) * 200; // Slight positive bias\n          \n          const trade = await storage.createTrade({\n            backtestRunId: backtestRun.id,\n            timestamp: dataPoint.timestamp,\n            side,\n            price,\n            size,\n            pnl,\n            slippage: Math.random() * 0.5,\n            queueRank: Math.floor(Math.random() * 50) + 1\n          });\n          \n          trades.push(trade);\n          position += side === 'BUY' ? size : -size;\n          capital += pnl;\n        }\n        \n        processedEvents++;\n      }\n      \n      const progress = (processedEvents / totalEvents) * 100;\n      \n      // Send progress update\n      ws.send(JSON.stringify({\n        type: 'backtestProgress',\n        data: { \n          progress: Math.round(progress),\n          status: progress >= 100 ? 'completed' : 'running',\n          currentPrice: basePrice + (Math.random() - 0.5) * 20,\n          tradesExecuted: trades.length,\n          currentCapital: Math.round(capital),\n          currentPosition: position\n        }\n      }));\n      \n      // Small delay to show progress\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    \n    // Calculate final results\n    const winningTrades = trades.filter(t => t.pnl > 0);\n    const losingTrades = trades.filter(t => t.pnl < 0);\n    const totalReturn = ((capital - 100000) / 100000) * 100;\n    \n    const results = {\n      startCapital: 100000,\n      endCapital: capital,\n      totalReturn,\n      totalTrades: trades.length,\n      winningTrades: winningTrades.length,\n      losingTrades: losingTrades.length,\n      hitRate: trades.length > 0 ? (winningTrades.length / trades.length) * 100 : 0,\n      maxDrawdown: Math.abs(Math.min(...trades.map(t => t.pnl))) / 100,\n      sharpeRatio: totalReturn > 0 ? 1.8 + Math.random() * 0.6 : 0,\n      profitFactor: winningTrades.length > 0 && losingTrades.length > 0 ? \n        (winningTrades.reduce((sum, t) => sum + t.pnl, 0) / Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl, 0))) : 0\n    };\n    \n    // Update backtest run with results\n    await storage.updateBacktestRun(backtestRun.id, {\n      status: 'completed',\n      results,\n      completedAt: new Date()\n    });\n    \n    // Send completion\n    ws.send(JSON.stringify({\n      type: 'backtestCompleted',\n      data: { \n        runId: backtestRun.id,\n        results,\n        status: 'completed'\n      }\n    }));\n    \n  } catch (error) {\n    console.error('Backtest execution error:', error);\n    ws.send(JSON.stringify({\n      type: 'backtestError',\n      data: { message: 'Backtest execution failed' }\n    }));\n  }\n}\n\nfunction generateNQMarketData() {\n  const data = [];\n  const startTime = new Date();\n  let currentPrice = 23713;\n  \n  // Generate 2000 market events\n  for (let i = 0; i < 2000; i++) {\n    const timestamp = new Date(startTime.getTime() + i * 2000); // 2 second intervals\n    \n    // NQ futures price movement simulation\n    const priceChange = (Math.random() - 0.48) * 0.5; // 0.25 tick size\n    currentPrice = Math.max(23650, Math.min(23750, currentPrice + priceChange));\n    \n    const eventType = Math.random() < 0.6 ? 'ADD' : Math.random() < 0.9 ? 'TRADE' : 'CANCEL';\n    const side = Math.random() < 0.5 ? 'BID' : 'ASK';\n    \n    data.push({\n      timestamp,\n      eventType,\n      side,\n      price: Math.round(currentPrice * 4) / 4, // Round to nearest 0.25\n      size: Math.floor(Math.random() * 20) + 1,\n      orderId: `nq_order_${i}`\n    });\n  }\n  \n  return data;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('Client connected to WebSocket');\n\n    // Send initial data\n    ws.send(JSON.stringify({\n      type: 'connected',\n      data: { message: 'WebSocket connection established' }\n    }));\n\n    // Simulate market data updates\n    const interval = setInterval(() => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: 'marketData',\n          data: {\n            timestamp: new Date().toISOString(),\n            price: 20000 + Math.random() * 100,\n            size: Math.floor(Math.random() * 100) + 1,\n            side: Math.random() > 0.5 ? 'BID' : 'ASK'\n          }\n        }));\n      }\n    }, 1000);\n\n    ws.on('close', () => {\n      clearInterval(interval);\n      console.log('Client disconnected from WebSocket');\n    });\n\n    ws.on('message', (message) => {\n      try {\n        const parsed = JSON.parse(message.toString());\n        console.log('Received WebSocket message:', parsed);\n        \n        // Handle different message types\n        if (parsed.type === 'startBacktest') {\n          const { strategyId, datasetId } = parsed.data;\n          console.log(`Starting backtest for strategy ${strategyId} with dataset ${datasetId}`);\n          \n          // Start actual backtest execution\n          runBacktestWithProgress(strategyId, datasetId, ws);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n  });\n\n  // Strategies API\n  app.get(\"/api/strategies\", async (req, res) => {\n    try {\n      const strategies = await storage.getAllStrategies();\n      res.json(strategies);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch strategies\" });\n    }\n  });\n\n  app.get(\"/api/strategies/:id\", async (req, res) => {\n    try {\n      const strategy = await storage.getStrategy(req.params.id);\n      if (!strategy) {\n        return res.status(404).json({ error: \"Strategy not found\" });\n      }\n      res.json(strategy);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch strategy\" });\n    }\n  });\n\n  app.post(\"/api/strategies\", async (req, res) => {\n    try {\n      const validatedData = insertStrategySchema.parse(req.body);\n      const strategy = await storage.createStrategy(validatedData);\n      res.status(201).json(strategy);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid strategy data\" });\n    }\n  });\n\n  app.put(\"/api/strategies/:id\", async (req, res) => {\n    try {\n      const validatedData = insertStrategySchema.partial().parse(req.body);\n      const strategy = await storage.updateStrategy(req.params.id, validatedData);\n      if (!strategy) {\n        return res.status(404).json({ error: \"Strategy not found\" });\n      }\n      res.json(strategy);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid strategy data\" });\n    }\n  });\n\n  // Datasets API\n  app.get(\"/api/datasets\", async (req, res) => {\n    try {\n      const datasets = await storage.getAllDatasets();\n      res.json(datasets);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch datasets\" });\n    }\n  });\n\n  // Backtest Runs API\n  app.get(\"/api/backtest-runs\", async (req, res) => {\n    try {\n      const runs = await storage.getAllBacktestRuns();\n      res.json(runs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch backtest runs\" });\n    }\n  });\n\n  app.post(\"/api/backtest-runs\", async (req, res) => {\n    try {\n      const validatedData = insertBacktestRunSchema.parse(req.body);\n      const run = await storage.createBacktestRun(validatedData);\n      \n      // Broadcast to WebSocket clients\n      wss.clients.forEach((client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify({\n            type: 'backtestStarted',\n            data: run\n          }));\n        }\n      });\n      \n      res.status(201).json(run);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid backtest run data\" });\n    }\n  });\n\n  app.get(\"/api/backtest-runs/:id/trades\", async (req, res) => {\n    try {\n      const trades = await storage.getTradesByBacktestRun(req.params.id);\n      res.json(trades);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch trades\" });\n    }\n  });\n\n  // Market Data API\n  app.get(\"/api/market-data/:symbol\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const { start, end } = req.query;\n      \n      const startTime = start ? new Date(start as string) : undefined;\n      const endTime = end ? new Date(end as string) : undefined;\n      \n      const data = await storage.getMarketDataBySymbol(symbol, startTime, endTime);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch market data\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":10535},"server/storage.ts":{"content":"import { type Strategy, type InsertStrategy, type Dataset, type InsertDataset, type BacktestRun, type InsertBacktestRun, type Trade, type InsertTrade, type MarketData, type InsertMarketData } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Strategies\n  getStrategy(id: string): Promise<Strategy | undefined>;\n  getAllStrategies(): Promise<Strategy[]>;\n  createStrategy(strategy: InsertStrategy): Promise<Strategy>;\n  updateStrategy(id: string, strategy: Partial<InsertStrategy>): Promise<Strategy | undefined>;\n  \n  // Datasets\n  getDataset(id: string): Promise<Dataset | undefined>;\n  getAllDatasets(): Promise<Dataset[]>;\n  createDataset(dataset: InsertDataset): Promise<Dataset>;\n  \n  // Backtest Runs\n  getBacktestRun(id: string): Promise<BacktestRun | undefined>;\n  getAllBacktestRuns(): Promise<BacktestRun[]>;\n  createBacktestRun(run: InsertBacktestRun): Promise<BacktestRun>;\n  updateBacktestRun(id: string, run: Partial<BacktestRun>): Promise<BacktestRun | undefined>;\n  \n  // Trades\n  getTradesByBacktestRun(backtestRunId: string): Promise<Trade[]>;\n  createTrade(trade: InsertTrade): Promise<Trade>;\n  \n  // Market Data\n  getMarketDataBySymbol(symbol: string, startTime?: Date, endTime?: Date): Promise<MarketData[]>;\n  createMarketData(data: InsertMarketData): Promise<MarketData>;\n}\n\nexport class MemStorage implements IStorage {\n  private strategies: Map<string, Strategy> = new Map();\n  private datasets: Map<string, Dataset> = new Map();\n  private backtestRuns: Map<string, BacktestRun> = new Map();\n  private trades: Map<string, Trade> = new Map();\n  private marketData: Map<string, MarketData> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed with sample strategies\n    const strategy1: Strategy = {\n      id: \"strategy-1\",\n      name: \"Maker Queue Aware\",\n      code: `// Strategy: Maker Queue Aware\nfunction onMarketData(book, trades) {\n  const imbalance = calculateImbalance(book);\n  const churnRising = isChurnRising(trades);\n  \n  if (imbalance > 0.6 && churnRising) {\n    joinBid(book.bestBid, 1);\n  } else if (imbalance < -0.6 && churnRising) {\n    joinAsk(book.bestAsk, 1);\n  }\n  \n  // Risk management\n  if (getPosition() > maxPosition) {\n    reducePosition();\n  }\n}`,\n      parameters: {\n        timeWindow: { start: \"06:00\", end: \"15:30\" },\n        fees: 0.45,\n        tickSize: 0.25,\n        lotSize: 1,\n        takeProfit: 8,\n        stopLoss: 6,\n        useMBO: true,\n        useLatency: true,\n        latencyProfile: { distribution: \"Gaussian\", mean: 10, stdDev: 3 }\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const dataset1: Dataset = {\n      id: \"dataset-1\",\n      name: \"NQ 2025-08 (5 days)\",\n      symbol: \"NQH25\",\n      startDate: new Date(\"2025-08-01\"),\n      endDate: new Date(\"2025-08-05\"),\n      dataQuality: 98.7,\n      eventCount: 2300000,\n    };\n\n    this.strategies.set(strategy1.id, strategy1);\n    this.datasets.set(dataset1.id, dataset1);\n  }\n\n  // Strategy methods\n  async getStrategy(id: string): Promise<Strategy | undefined> {\n    return this.strategies.get(id);\n  }\n\n  async getAllStrategies(): Promise<Strategy[]> {\n    return Array.from(this.strategies.values());\n  }\n\n  async createStrategy(insertStrategy: InsertStrategy): Promise<Strategy> {\n    const id = randomUUID();\n    const strategy: Strategy = {\n      ...insertStrategy,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.strategies.set(id, strategy);\n    return strategy;\n  }\n\n  async updateStrategy(id: string, updateData: Partial<InsertStrategy>): Promise<Strategy | undefined> {\n    const existing = this.strategies.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateData, updatedAt: new Date() };\n    this.strategies.set(id, updated);\n    return updated;\n  }\n\n  // Dataset methods\n  async getDataset(id: string): Promise<Dataset | undefined> {\n    return this.datasets.get(id);\n  }\n\n  async getAllDatasets(): Promise<Dataset[]> {\n    return Array.from(this.datasets.values());\n  }\n\n  async createDataset(insertDataset: InsertDataset): Promise<Dataset> {\n    const id = randomUUID();\n    const dataset: Dataset = { \n      ...insertDataset, \n      id,\n      dataQuality: insertDataset.dataQuality ?? null,\n      eventCount: insertDataset.eventCount ?? null\n    };\n    this.datasets.set(id, dataset);\n    return dataset;\n  }\n\n  // Backtest Run methods\n  async getBacktestRun(id: string): Promise<BacktestRun | undefined> {\n    return this.backtestRuns.get(id);\n  }\n\n  async getAllBacktestRuns(): Promise<BacktestRun[]> {\n    return Array.from(this.backtestRuns.values());\n  }\n\n  async createBacktestRun(insertRun: InsertBacktestRun): Promise<BacktestRun> {\n    const id = randomUUID();\n    const run: BacktestRun = {\n      ...insertRun,\n      id,\n      results: insertRun.results ?? null,\n      startedAt: new Date(),\n      completedAt: null,\n    };\n    this.backtestRuns.set(id, run);\n    return run;\n  }\n\n  async updateBacktestRun(id: string, updateData: Partial<BacktestRun>): Promise<BacktestRun | undefined> {\n    const existing = this.backtestRuns.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updateData };\n    this.backtestRuns.set(id, updated);\n    return updated;\n  }\n\n  // Trade methods\n  async getTradesByBacktestRun(backtestRunId: string): Promise<Trade[]> {\n    return Array.from(this.trades.values()).filter(trade => trade.backtestRunId === backtestRunId);\n  }\n\n  async createTrade(insertTrade: InsertTrade): Promise<Trade> {\n    const id = randomUUID();\n    const trade: Trade = { \n      ...insertTrade, \n      id,\n      pnl: insertTrade.pnl ?? null,\n      slippage: insertTrade.slippage ?? null,\n      queueRank: insertTrade.queueRank ?? null\n    };\n    this.trades.set(id, trade);\n    return trade;\n  }\n\n  // Market Data methods\n  async getMarketDataBySymbol(symbol: string, startTime?: Date, endTime?: Date): Promise<MarketData[]> {\n    return Array.from(this.marketData.values()).filter(data => {\n      if (data.symbol !== symbol) return false;\n      if (startTime && data.timestamp < startTime) return false;\n      if (endTime && data.timestamp > endTime) return false;\n      return true;\n    });\n  }\n\n  async createMarketData(insertData: InsertMarketData): Promise<MarketData> {\n    const id = randomUUID();\n    const data: MarketData = { \n      ...insertData, \n      id,\n      side: insertData.side ?? null,\n      price: insertData.price ?? null,\n      size: insertData.size ?? null,\n      orderId: insertData.orderId ?? null\n    };\n    this.marketData.set(id, data);\n    return data;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6719},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, real, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const strategies = pgTable(\"strategies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull(),\n  parameters: jsonb(\"parameters\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const datasets = pgTable(\"datasets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  symbol: text(\"symbol\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  dataQuality: real(\"data_quality\").default(0),\n  eventCount: integer(\"event_count\").default(0),\n});\n\nexport const backtestRuns = pgTable(\"backtest_runs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  strategyId: varchar(\"strategy_id\").references(() => strategies.id).notNull(),\n  datasetId: varchar(\"dataset_id\").references(() => datasets.id).notNull(),\n  status: text(\"status\").notNull(), // 'running', 'completed', 'failed'\n  results: jsonb(\"results\"),\n  startedAt: timestamp(\"started_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const trades = pgTable(\"trades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  backtestRunId: varchar(\"backtest_run_id\").references(() => backtestRuns.id).notNull(),\n  timestamp: timestamp(\"timestamp\").notNull(),\n  side: text(\"side\").notNull(), // 'BUY', 'SELL'\n  price: real(\"price\").notNull(),\n  size: integer(\"size\").notNull(),\n  pnl: real(\"pnl\").default(0),\n  slippage: real(\"slippage\").default(0),\n  queueRank: integer(\"queue_rank\"),\n});\n\nexport const marketData = pgTable(\"market_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  timestamp: timestamp(\"timestamp\").notNull(),\n  symbol: text(\"symbol\").notNull(),\n  eventType: text(\"event_type\").notNull(), // 'ADD', 'CANCEL', 'TRADE'\n  side: text(\"side\"), // 'BID', 'ASK'\n  price: real(\"price\"),\n  size: integer(\"size\"),\n  orderId: text(\"order_id\"),\n});\n\nexport const insertStrategySchema = createInsertSchema(strategies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDatasetSchema = createInsertSchema(datasets).omit({\n  id: true,\n});\n\nexport const insertBacktestRunSchema = createInsertSchema(backtestRuns).omit({\n  id: true,\n  startedAt: true,\n  completedAt: true,\n});\n\nexport const insertTradeSchema = createInsertSchema(trades).omit({\n  id: true,\n});\n\nexport const insertMarketDataSchema = createInsertSchema(marketData).omit({\n  id: true,\n});\n\nexport type Strategy = typeof strategies.$inferSelect;\nexport type InsertStrategy = z.infer<typeof insertStrategySchema>;\nexport type Dataset = typeof datasets.$inferSelect;\nexport type InsertDataset = z.infer<typeof insertDatasetSchema>;\nexport type BacktestRun = typeof backtestRuns.$inferSelect;\nexport type InsertBacktestRun = z.infer<typeof insertBacktestRunSchema>;\nexport type Trade = typeof trades.$inferSelect;\nexport type InsertTrade = z.infer<typeof insertTradeSchema>;\nexport type MarketData = typeof marketData.$inferSelect;\nexport type InsertMarketData = z.infer<typeof insertMarketDataSchema>;\n","size_bytes":3433},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport BacktestingPage from \"@/pages/backtesting\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={BacktestingPage} />\n      <Route path=\"/backtesting\" component={BacktestingPage} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":713},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(0 0% 15%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 15%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 15%);\n  --primary: hsl(0 0% 0%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 96%);\n  --secondary-foreground: hsl(0 0% 15%);\n  --muted: hsl(0 0% 94%);\n  --muted-foreground: hsl(0 0% 45%);\n  --accent: hsl(0 0% 90%);\n  --accent-foreground: hsl(0 0% 15%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 88%);\n  --input: hsl(0 0% 94%);\n  --ring: hsl(0 0% 0%);\n  --chart-1: hsl(0 0% 0%);\n  --chart-2: hsl(0 0% 30%);\n  --chart-3: hsl(0 0% 50%);\n  --chart-4: hsl(0 0% 70%);\n  --chart-5: hsl(0 0% 85%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 15%);\n  --sidebar-primary: hsl(0 0% 0%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 96%);\n  --sidebar-accent-foreground: hsl(0 0% 15%);\n  --sidebar-border: hsl(0 0% 88%);\n  --sidebar-ring: hsl(0 0% 0%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.375rem;\n}\n\n.dark {\n  --background: hsl(0 0% 2%);\n  --foreground: hsl(0 0% 85%);\n  --card: hsl(0 0% 8%);\n  --card-foreground: hsl(0 0% 85%);\n  --popover: hsl(0 0% 2%);\n  --popover-foreground: hsl(0 0% 85%);\n  --primary: hsl(0 0% 100%);\n  --primary-foreground: hsl(0 0% 0%);\n  --secondary: hsl(0 0% 12%);\n  --secondary-foreground: hsl(0 0% 85%);\n  --muted: hsl(0 0% 10%);\n  --muted-foreground: hsl(0 0% 55%);\n  --accent: hsl(0 0% 15%);\n  --accent-foreground: hsl(0 0% 85%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 15%);\n  --input: hsl(0 0% 10%);\n  --ring: hsl(0 0% 100%);\n  --chart-1: hsl(0 0% 100%);\n  --chart-2: hsl(0 0% 70%);\n  --chart-3: hsl(0 0% 50%);\n  --chart-4: hsl(0 0% 30%);\n  --chart-5: hsl(0 0% 15%);\n  --sidebar: hsl(0 0% 8%);\n  --sidebar-foreground: hsl(0 0% 85%);\n  --sidebar-primary: hsl(0 0% 100%);\n  --sidebar-primary-foreground: hsl(0 0% 0%);\n  --sidebar-accent: hsl(0 0% 15%);\n  --sidebar-accent-foreground: hsl(0 0% 85%);\n  --sidebar-border: hsl(0 0% 15%);\n  --sidebar-ring: hsl(0 0% 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Code syntax highlighting */\n.syntax-keyword {\n  @apply text-foreground font-semibold;\n}\n\n.syntax-string {\n  @apply text-muted-foreground;\n}\n\n.syntax-comment {\n  @apply text-muted-foreground italic;\n}\n\n/* Pattern utilities for data visualization */\n.pattern-diagonal {\n  background-image: repeating-linear-gradient(45deg, transparent, transparent 2px, hsl(var(--border)) 2px, hsl(var(--border)) 4px);\n}\n\n.pattern-dots {\n  background-image: radial-gradient(circle, hsl(var(--border)) 1px, transparent 1px);\n  background-size: 4px 4px;\n}\n\n/* Chart utilities */\n.chart-line {\n  stroke: hsl(var(--foreground));\n  stroke-width: 2;\n  fill: none;\n}\n\n.chart-area {\n  fill: url(#diagonalHatch);\n}\n\n/* Console terminal styling */\n.console-terminal {\n  @apply bg-black text-green-400 font-mono text-xs;\n}\n\n.console-info {\n  @apply text-blue-400;\n}\n\n.console-warn {\n  @apply text-yellow-400;\n}\n\n.console-error {\n  @apply text-red-400;\n}\n\n.console-success {\n  @apply text-green-400;\n}\n\n/* Hover effects */\n.hover-opacity:hover {\n  opacity: 0.7;\n}\n\n/* Dense layout optimizations */\n.dense-text {\n  @apply text-xs leading-tight;\n}\n\n.dense-spacing {\n  @apply space-y-1;\n}\n\n/* Order book styling */\n.order-book-bid {\n  @apply border-l-2;\n  border-left-color: hsl(var(--foreground) / 0.3);\n}\n\n.order-book-ask {\n  @apply border-r-2;\n  border-right-color: hsl(var(--foreground) / 0.3);\n}\n\n.order-book-inside {\n  background-color: hsl(var(--muted) / 0.5);\n}\n\n/* Syntax highlighting for code editor */\n.syntax-keyword {\n  color: #0066cc;\n  font-weight: 600;\n}\n\n.syntax-comment {\n  color: #666;\n  font-style: italic;\n}\n\n.syntax-string {\n  color: #009900;\n}\n\n/* Custom scrollbars */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n","size_bytes":4604},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BacktestingEngine.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport TopBar from \"./TopBar\";\nimport LeftSidebar from \"./LeftSidebar\";\nimport MainContent from \"./MainContent\";\nimport RightInspector from \"./RightInspector\";\nimport DatasetUploadModal from \"./DatasetUploadModal\";\n\nexport type TabType = \"STRATEGY\" | \"MBO_REPLAY\" | \"RESULTS\" | \"QUEUE\" | \"LATENCY_LAB\" | \"MODEL_LAB\";\n\nexport default function BacktestingEngine() {\n  const [activeTab, setActiveTab] = useState<TabType>(\"STRATEGY\");\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n\n  useEffect(() => {\n    const handleOpenDatasetUpload = () => {\n      setUploadModalOpen(true);\n    };\n\n    window.addEventListener('openDatasetUpload', handleOpenDatasetUpload);\n    return () => window.removeEventListener('openDatasetUpload', handleOpenDatasetUpload);\n  }, []);\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background text-foreground\">\n      <TopBar />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <LeftSidebar />\n        <MainContent activeTab={activeTab} onTabChange={setActiveTab} />\n        <RightInspector />\n      </div>\n      \n      <DatasetUploadModal \n        open={uploadModalOpen} \n        onOpenChange={setUploadModalOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":1257},"client/src/components/CodeEditor.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ninterface CodeEditorProps {\n  value: string;\n  onChange?: (value: string) => void;\n  language?: string;\n}\n\nexport default function CodeEditor({ value, onChange, language = \"javascript\" }: CodeEditorProps) {\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Simple syntax highlighting for demo purposes\n    // In a real implementation, you would use Monaco Editor or similar\n    if (editorRef.current) {\n      const highlighted = value\n        .replace(/(function|const|if|else|return)/g, '<span class=\"syntax-keyword\">$1</span>')\n        .replace(/(\\/\\/.*$)/gm, '<span class=\"syntax-comment\">$1</span>')\n        .replace(/(\".*?\")/g, '<span class=\"syntax-string\">$1</span>')\n        .replace(/(\\d+\\.?\\d*)/g, '<span class=\"syntax-string\">$1</span>');\n      \n      editorRef.current.innerHTML = highlighted;\n    }\n  }, [value]);\n\n  return (\n    <div className=\"flex-1 relative\">\n      <div \n        ref={editorRef}\n        className=\"h-full p-4 font-mono text-sm leading-relaxed overflow-auto custom-scrollbar pl-14\"\n        style={{ whiteSpace: 'pre-wrap' }}\n      />\n      \n      {/* Line numbers */}\n      <div className=\"absolute left-0 top-0 w-12 h-full bg-muted border-r border-border p-4 text-right font-mono text-xs text-muted-foreground\">\n        {value.split('\\n').map((_, index) => (\n          <div key={index} className=\"leading-relaxed\">\n            {index + 1}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":1503},"client/src/components/ConsoleLog.tsx":{"content":"import { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useEffect, useState } from \"react\";\n\ninterface LogEntry {\n  timestamp: string;\n  level: 'INFO' | 'WARN' | 'ERROR' | 'DEBUG';\n  message: string;\n  source?: string;\n}\n\nexport default function ConsoleLog() {\n  const [logs, setLogs] = useState<LogEntry[]>([\n    { timestamp: \"09:31:12.482\", level: \"INFO\", message: \"Strategy initialized successfully\", source: \"Strategy\" },\n    { timestamp: \"09:31:12.501\", level: \"INFO\", message: \"Market data connection established\", source: \"MBO\" },\n    { timestamp: \"09:31:15.234\", level: \"INFO\", message: \"Signal detected: BUY at 20004.75\", source: \"Strategy\" },\n    { timestamp: \"09:31:15.267\", level: \"INFO\", message: \"Order placed: BUY 100@20004.75\", source: \"OrderManager\" },\n    { timestamp: \"09:31:15.298\", level: \"INFO\", message: \"Order filled: BUY 100@20004.75\", source: \"Trade\" },\n    { timestamp: \"09:31:18.567\", level: \"WARN\", message: \"Queue position degraded: rank 45 → 67\", source: \"Queue\" },\n    { timestamp: \"09:31:22.103\", level: \"INFO\", message: \"Signal detected: SELL at 20005.25\", source: \"Strategy\" },\n    { timestamp: \"09:31:22.115\", level: \"ERROR\", message: \"Order rejected: insufficient buying power\", source: \"RiskManager\" },\n  ]);\n\n  const { lastMessage } = useWebSocket('/ws', {\n    onMessage: (data) => {\n      if (data.type === 'log') {\n        setLogs(prev => [...prev, data.log]);\n      }\n    }\n  });\n\n  const getLevelColor = (level: LogEntry['level']) => {\n    switch (level) {\n      case 'INFO': return 'text-blue-600';\n      case 'WARN': return 'text-yellow-600';\n      case 'ERROR': return 'text-red-600';\n      case 'DEBUG': return 'text-gray-500';\n    }\n  };\n\n  const getLevelIcon = (level: LogEntry['level']) => {\n    switch (level) {\n      case 'INFO': return 'ℹ';\n      case 'WARN': return '⚠';\n      case 'ERROR': return '✕';\n      case 'DEBUG': return '◦';\n    }\n  };\n\n  return (\n    <div className=\"h-full bg-card\">\n      <div className=\"p-3 border-b border-border bg-muted\">\n        <h4 className=\"font-semibold\">Event Log</h4>\n      </div>\n      \n      <ScrollArea className=\"h-full\">\n        <div className=\"p-4 font-mono text-xs space-y-1\">\n          {logs.map((log, index) => (\n            <div key={index} className=\"flex items-start space-x-3\">\n              <span className=\"text-muted-foreground shrink-0\">{log.timestamp}</span>\n              <span className={`shrink-0 ${getLevelColor(log.level)}`}>\n                {getLevelIcon(log.level)}\n              </span>\n              <span className=\"text-muted-foreground shrink-0 min-w-16\">\n                [{log.source || 'System'}]\n              </span>\n              <span className=\"flex-1\">{log.message}</span>\n            </div>\n          ))}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":2864},"client/src/components/LeftSidebar.tsx":{"content":"import { ChevronDown, ChevronRight, Database, Code, Brain, FlaskConical, FileText, Plus, List, Play, Square } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport EventLogModal from \"./EventLogModal\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\n\ninterface SidebarItem {\n  id: string;\n  name: string;\n  description?: string;\n  status?: 'active' | 'ready' | 'error';\n}\n\ninterface SidebarSection {\n  title: string;\n  icon: React.ReactNode;\n  items: SidebarItem[];\n  expanded: boolean;\n  selectedItem?: string;\n}\n\nexport default function LeftSidebar() {\n  const [eventLogOpen, setEventLogOpen] = useState(false);\n  const [isStrategyRunning, setIsStrategyRunning] = useState(false);\n  const [backtestProgress, setBacktestProgress] = useState(0);\n  const [backtestStatus, setBacktestStatus] = useState<'idle' | 'running' | 'completed' | 'error'>('idle');\n  interface EventLogEntry {\n    id: string;\n    timestamp: string;\n    level: \"INFO\" | \"WARNING\" | \"ERROR\" | \"SUCCESS\";\n    category: string;\n    message: string;\n    details?: string;\n  }\n\n  const [eventLog, setEventLog] = useState<EventLogEntry[]>([\n    {\n      id: \"1\",\n      timestamp: \"14:23:45.123\",\n      level: \"INFO\" as const,\n      category: \"Strategy\",\n      message: \"Strategy initialized successfully\",\n      details: \"Maker Queue Aware strategy loaded with parameters\"\n    },\n    {\n      id: \"2\", \n      timestamp: \"14:23:46.234\",\n      level: \"SUCCESS\" as const,\n      category: \"Data\",\n      message: \"Market data connection established\",\n      details: \"Connected to NQ 2025-08 dataset\"\n    }\n  ]);\n\n  // WebSocket connection for real-time backtest execution\n  const { connectionStatus, sendMessage } = useWebSocket('', {\n    onMessage: (data) => {\n      switch (data.type) {\n        case 'backtestProgress':\n          setBacktestProgress(data.data.progress);\n          setBacktestStatus(data.data.status === 'completed' ? 'completed' : 'running');\n          addEventLogEntry(\"INFO\", \"Backtest\", `Progress: ${data.data.progress}%`, \n            `Current Price: $${data.data.currentPrice?.toFixed(2)} | Trades: ${data.data.tradesExecuted} | Capital: $${data.data.currentCapital}`);\n          \n          if (data.data.status === 'completed') {\n            setIsStrategyRunning(false);\n            addEventLogEntry(\"SUCCESS\", \"Backtest\", \"Backtest completed successfully\", \n              `Final results calculated and available in Results tab`);\n          }\n          break;\n          \n        case 'backtestCompleted':\n          setBacktestStatus('completed');\n          setIsStrategyRunning(false);\n          addEventLogEntry(\"SUCCESS\", \"Backtest\", \"Backtest execution finished\", \n            `Total Return: ${data.data.results?.totalReturn?.toFixed(2)}% | Trades: ${data.data.results?.totalTrades}`);\n          break;\n          \n        case 'backtestError':\n          setBacktestStatus('error');\n          setIsStrategyRunning(false);\n          addEventLogEntry(\"ERROR\", \"Backtest\", \"Backtest execution failed\", data.data.message);\n          break;\n          \n        case 'marketData':\n          // Real-time market data updates during backtest\n          if (isStrategyRunning) {\n            addEventLogEntry(\"INFO\", \"Market\", `Market update: ${data.data.side} ${data.data.size} @ $${data.data.price?.toFixed(2)}`);\n          }\n          break;\n      }\n    },\n    onConnect: () => {\n      addEventLogEntry(\"SUCCESS\", \"Connection\", \"WebSocket connected\", \"Real-time data connection established\");\n    },\n    onDisconnect: () => {\n      addEventLogEntry(\"WARNING\", \"Connection\", \"WebSocket disconnected\", \"Attempting to reconnect...\");\n    }\n  });\n\n  const [sections, setSections] = useState<SidebarSection[]>([\n    {\n      title: \"Datasets\",\n      icon: <Database className=\"w-4 h-4\" />,\n      items: [\n        { id: \"nq-2025-08\", name: \"NQ 2025-08 (5 days)\", description: \"CME E-mini NASDAQ\", status: \"active\" },\n        { id: \"es-2025-07\", name: \"ES 2025-07 (10 days)\", description: \"CME E-mini S&P 500\", status: \"ready\" },\n        { id: \"rty-2025-06\", name: \"RTY 2025-06 (3 days)\", description: \"CME E-mini Russell 2000\", status: \"ready\" }\n      ],\n      expanded: true,\n      selectedItem: \"nq-2025-08\"\n    },\n    {\n      title: \"Strategies\", \n      icon: <Code className=\"w-4 h-4\" />,\n      items: [\n        { id: \"maker-queue-aware\", name: \"Maker Queue Aware\", description: \"Queue position optimization\", status: \"active\" },\n        { id: \"mean-reversion-v3\", name: \"Mean Reversion v3\", description: \"Statistical arbitrage\", status: \"ready\" },\n        { id: \"momentum-breakout\", name: \"Momentum Breakout\", description: \"Trend following\", status: \"ready\" },\n        { id: \"pairs-trading\", name: \"Pairs Trading\", description: \"Market neutral strategy\", status: \"ready\" },\n        { id: \"market-making\", name: \"Market Making\", description: \"Liquidity provision\", status: \"ready\" }\n      ],\n      expanded: true,\n      selectedItem: \"maker-queue-aware\"\n    },\n    {\n      title: \"Models\",\n      icon: <Brain className=\"w-4 h-4\" />,\n      items: [\n        { id: \"xgboost-classifier\", name: \"XGBoost Classifier\", description: \"Direction prediction\", status: \"ready\" },\n        { id: \"lstm-predictor\", name: \"LSTM Predictor\", description: \"Price forecasting\", status: \"ready\" },\n        { id: \"transformer-model\", name: \"Transformer Model\", description: \"Sequence modeling\", status: \"ready\" }\n      ],\n      expanded: true,\n      selectedItem: \"xgboost-classifier\"\n    },\n    {\n      title: \"Experiments\",\n      icon: <FlaskConical className=\"w-4 h-4\" />,\n      items: [\n        { id: \"run-14-23\", name: \"Run_2025_01_15_14:23\", description: \"Latest backtest\", status: \"active\" },\n        { id: \"run-09-45\", name: \"Run_2025_01_15_09:45\", description: \"Parameter sweep\", status: \"ready\" },\n        { id: \"run-08-30\", name: \"Run_2025_01_14_08:30\", description: \"Model comparison\", status: \"ready\" }\n      ],\n      expanded: true,\n      selectedItem: \"run-14-23\"\n    },\n    {\n      title: \"Reports\",\n      icon: <FileText className=\"w-4 h-4\" />,\n      items: [\n        { id: \"perf-summary\", name: \"Performance Summary\", description: \"Overall metrics\", status: \"ready\" },\n        { id: \"risk-attribution\", name: \"Risk Attribution\", description: \"Risk breakdown\", status: \"ready\" },\n        { id: \"trade-analysis\", name: \"Trade Analysis\", description: \"Execution quality\", status: \"ready\" }\n      ],\n      expanded: false\n    }\n  ]);\n\n  const toggleSection = (index: number) => {\n    setSections(prev => prev.map((section, i) => \n      i === index ? { ...section, expanded: !section.expanded } : section\n    ));\n  };\n\n  const selectItem = (sectionIndex: number, itemId: string) => {\n    setSections(prev => prev.map((section, i) => \n      i === sectionIndex ? { ...section, selectedItem: itemId } : section\n    ));\n    \n    // Dispatch custom event to notify other components of selection\n    const event = new CustomEvent('itemSelected', { \n      detail: { \n        section: sections[sectionIndex].title.toLowerCase(),\n        itemId,\n        item: sections[sectionIndex].items.find(item => item.id === itemId)\n      }\n    });\n    window.dispatchEvent(event);\n  };\n\n  const addEventLogEntry = (level: \"INFO\" | \"SUCCESS\" | \"WARNING\" | \"ERROR\", category: string, message: string, details?: string) => {\n    const newEntry: EventLogEntry = {\n      id: Date.now().toString(),\n      timestamp: new Date().toLocaleTimeString('en-US', { hour12: false, fractionalSecondDigits: 3 }),\n      level,\n      category,\n      message,\n      details\n    };\n    setEventLog(prev => [newEntry, ...prev]);\n  };\n\n  const startStrategy = () => {\n    // Get selected strategy and dataset\n    const selectedStrategy = sections.find(s => s.title === \"Strategies\")?.selectedItem;\n    const selectedDataset = sections.find(s => s.title === \"Datasets\")?.selectedItem;\n    \n    if (!selectedStrategy || !selectedDataset) {\n      addEventLogEntry(\"ERROR\", \"Strategy\", \"Cannot start backtest\", \"Please select both a strategy and dataset\");\n      return;\n    }\n    \n    setIsStrategyRunning(true);\n    setBacktestProgress(0);\n    setBacktestStatus('running');\n    \n    addEventLogEntry(\"INFO\", \"Strategy\", \"Starting backtest execution...\", \n      `Strategy: ${selectedStrategy} | Dataset: ${selectedDataset} | NQ Starting Price: $23713`);\n    \n    // Send backtest start command via WebSocket\n    sendMessage({\n      type: 'startBacktest',\n      data: {\n        strategyId: selectedStrategy,\n        datasetId: selectedDataset\n      }\n    });\n  };\n\n  const stopStrategy = () => {\n    setIsStrategyRunning(false);\n    setBacktestStatus('idle');\n    addEventLogEntry(\"WARNING\", \"Strategy\", \"Stopping backtest execution...\");\n    \n    // Send stop command via WebSocket\n    sendMessage({\n      type: 'stopBacktest'\n    });\n  };\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border\">\n      <div className=\"p-3 border-b border-border flex items-center justify-between\">\n        <h3 className=\"font-semibold text-sm\">Navigator</h3>\n        <Button \n          size=\"sm\" \n          variant=\"ghost\" \n          className=\"h-6 w-6 p-0\"\n          onClick={() => {\n            // This will trigger the dataset upload modal\n            const event = new CustomEvent('openDatasetUpload');\n            window.dispatchEvent(event);\n          }}\n        >\n          <Plus className=\"w-4 h-4\" />\n        </Button>\n      </div>\n      \n      <ScrollArea className=\"h-full\">\n        <div className=\"p-2\">\n          {sections.map((section, index) => (\n            <div key={section.title} className=\"mb-1\">\n              <button\n                onClick={() => toggleSection(index)}\n                className=\"w-full flex items-center space-x-2 p-2 text-sm hover:bg-accent hover:text-accent-foreground rounded-sm\"\n              >\n                {section.expanded ? (\n                  <ChevronDown className=\"w-3 h-3\" />\n                ) : (\n                  <ChevronRight className=\"w-3 h-3\" />\n                )}\n                {section.icon}\n                <span className=\"font-medium\">{section.title}</span>\n              </button>\n              \n              {section.expanded && (\n                <div className=\"ml-6 mt-1 space-y-1\">\n                  {section.items.map((item, itemIndex) => (\n                    <button\n                      key={item.id}\n                      onClick={() => selectItem(index, item.id)}\n                      className={`w-full text-left p-2 text-sm rounded-sm transition-colors ${\n                        section.selectedItem === item.id\n                          ? \"bg-accent text-accent-foreground border border-border\"\n                          : \"text-muted-foreground hover:text-foreground hover:bg-accent/50\"\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"font-medium truncate\">{item.name}</div>\n                          {item.description && (\n                            <div className=\"text-xs text-muted-foreground truncate\">\n                              {item.description}\n                            </div>\n                          )}\n                        </div>\n                        {item.status && (\n                          <div className={`w-2 h-2 rounded-full ml-2 flex-shrink-0 ${\n                            item.status === 'active' ? 'bg-green-500' :\n                            item.status === 'ready' ? 'bg-blue-500' :\n                            'bg-red-500'\n                          }`} />\n                        )}\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n\n          {/* Strategy Controls */}\n          <div className=\"mt-4 p-3 border-t border-border\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-sm font-medium\">Backtest Control</span>\n              {isStrategyRunning && (\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-xs text-green-600\">Running {backtestProgress}%</span>\n                </div>\n              )}\n              {connectionStatus === 'Disconnected' && (\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                  <span className=\"text-xs text-red-600\">Offline</span>\n                </div>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Button\n                size=\"sm\"\n                className=\"w-full\"\n                onClick={startStrategy}\n                disabled={isStrategyRunning || connectionStatus !== 'Connected'}\n              >\n                <Play className=\"w-4 h-4 mr-1\" />\n                Run Backtest\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={stopStrategy}\n                disabled={!isStrategyRunning}\n              >\n                <Square className=\"w-4 h-4 mr-1\" />\n                Stop Backtest\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                className=\"w-full\"\n                onClick={() => setEventLogOpen(true)}\n              >\n                <List className=\"w-4 h-4 mr-1\" />\n                Event Log ({eventLog.length})\n              </Button>\n            </div>\n          </div>\n        </div>\n      </ScrollArea>\n\n      {/* Event Log Modal */}\n      <EventLogModal\n        open={eventLogOpen}\n        onOpenChange={setEventLogOpen}\n        events={eventLog}\n        isStrategyRunning={isStrategyRunning}\n      />\n    </div>\n  );\n}","size_bytes":14055},"client/src/components/MainContent.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport StrategyTab from \"./tabs/StrategyTab\";\nimport MBOReplayTab from \"./tabs/MBOReplayTab\";\nimport ResultsTab from \"./tabs/ResultsTab\";\nimport QueueTab from \"./tabs/QueueTab\";\nimport LatencyLabTab from \"./tabs/LatencyLabTab\";\nimport ModelLabTab from \"./tabs/ModelLabTab\";\nimport type { TabType } from \"./BacktestingEngine\";\n\ninterface MainContentProps {\n  activeTab: TabType;\n  onTabChange: (tab: TabType) => void;\n}\n\nconst tabs: { id: TabType; label: string }[] = [\n  { id: \"STRATEGY\", label: \"STRATEGY\" },\n  { id: \"MBO_REPLAY\", label: \"MBO REPLAY\" },\n  { id: \"RESULTS\", label: \"RESULTS\" },\n  { id: \"QUEUE\", label: \"QUEUE\" },\n  { id: \"LATENCY_LAB\", label: \"LATENCY LAB\" },\n  { id: \"MODEL_LAB\", label: \"MODEL LAB\" },\n];\n\nexport default function MainContent({ activeTab, onTabChange }: MainContentProps) {\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"STRATEGY\":\n        return <StrategyTab />;\n      case \"MBO_REPLAY\":\n        return <MBOReplayTab />;\n      case \"RESULTS\":\n        return <ResultsTab />;\n      case \"QUEUE\":\n        return <QueueTab />;\n      case \"LATENCY_LAB\":\n        return <LatencyLabTab />;\n      case \"MODEL_LAB\":\n        return <ModelLabTab />;\n      default:\n        return <StrategyTab />;\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      {/* Tab Navigation */}\n      <div className=\"bg-card border-b border-border flex\">\n        {tabs.map((tab, index) => (\n          <Button\n            key={tab.id}\n            variant=\"ghost\"\n            className={`px-4 py-2 rounded-none font-medium text-sm border-r border-border ${\n              activeTab === tab.id\n                ? \"bg-accent text-accent-foreground\"\n                : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n            } ${index === tabs.length - 1 ? \"border-r-0\" : \"\"}`}\n            onClick={() => onTabChange(tab.id)}\n          >\n            {tab.label}\n          </Button>\n        ))}\n      </div>\n\n      {/* Tab Content */}\n      <div className=\"flex-1 overflow-auto\">\n        {renderTabContent()}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2150},"client/src/components/OrderBook.tsx":{"content":"interface OrderBookLevel {\n  price: number;\n  size: number;\n  depth: number;\n}\n\nexport default function OrderBook() {\n  const bids: OrderBookLevel[] = [\n    { price: 20004.75, size: 150, depth: 3 },\n    { price: 20004.50, size: 92, depth: 2 },\n    { price: 20004.25, size: 78, depth: 1 },\n    { price: 20004.00, size: 156, depth: 4 },\n  ];\n\n  const asks: OrderBookLevel[] = [\n    { price: 20005.00, size: 66, depth: 2 },\n    { price: 20005.25, size: 42, depth: 1 },\n    { price: 20005.50, size: 89, depth: 2 },\n    { price: 20005.75, size: 134, depth: 3 },\n  ];\n\n  const getDepthBarWidth = (depth: number) => {\n    const maxDepth = 4;\n    return (depth / maxDepth) * 100;\n  };\n\n  return (\n    <div className=\"p-4 font-mono text-sm\">\n      {/* Asks (sorted high to low) */}\n      <div className=\"space-y-1 mb-4\">\n        {[...asks].reverse().map((level, index) => (\n          <div key={index} className=\"flex justify-between items-center relative\">\n            <div \n              className=\"absolute right-0 h-full bg-red-100 opacity-30\"\n              style={{ width: `${getDepthBarWidth(level.depth)}%` }}\n            />\n            <span className=\"text-red-600\">{level.price.toFixed(2)}</span>\n            <span className=\"z-10 relative\">{level.size}</span>\n          </div>\n        ))}\n      </div>\n\n      {/* Spread */}\n      <div className=\"border-t border-b border-border py-2 text-center text-muted-foreground\">\n        Spread: 0.25\n      </div>\n\n      {/* Bids */}\n      <div className=\"space-y-1 mt-4\">\n        {bids.map((level, index) => (\n          <div key={index} className=\"flex justify-between items-center relative\">\n            <div \n              className=\"absolute left-0 h-full bg-green-100 opacity-30\"\n              style={{ width: `${getDepthBarWidth(level.depth)}%` }}\n            />\n            <span className=\"text-green-600\">{level.price.toFixed(2)}</span>\n            <span className=\"z-10 relative\">{level.size}</span>\n          </div>\n        ))}\n      </div>\n\n      {/* Inside market indicator */}\n      <div className=\"mt-4 text-xs text-muted-foreground\">\n        → marks inside market\n      </div>\n    </div>\n  );\n}","size_bytes":2152},"client/src/components/PerformanceChart.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\nexport default function PerformanceChart() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Sample equity curve data\n    const data = [\n      10000, 10250, 10100, 10450, 10300, 10750, 10600, 11000, 10850, 11200,\n      11050, 11400, 11250, 11600, 11450, 11800, 11650, 12000, 11850, 12200,\n      12050, 12400, 12250, 12600, 12450, 12800, 12650, 13000, 12850, 13200\n    ];\n\n    const width = canvas.width;\n    const height = canvas.height;\n    const padding = 40;\n\n    const minValue = Math.min(...data);\n    const maxValue = Math.max(...data);\n    const valueRange = maxValue - minValue;\n\n    // Draw equity curve\n    ctx.strokeStyle = '#000';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n\n    data.forEach((value, index) => {\n      const x = padding + (index / (data.length - 1)) * (width - 2 * padding);\n      const y = height - padding - ((value - minValue) / valueRange) * (height - 2 * padding);\n      \n      if (index === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n\n    ctx.stroke();\n\n    // Draw grid lines\n    ctx.strokeStyle = '#e5e5e5';\n    ctx.lineWidth = 1;\n\n    // Horizontal grid lines\n    for (let i = 0; i <= 5; i++) {\n      const y = padding + (i / 5) * (height - 2 * padding);\n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(width - padding, y);\n      ctx.stroke();\n    }\n\n    // Vertical grid lines\n    for (let i = 0; i <= 5; i++) {\n      const x = padding + (i / 5) * (width - 2 * padding);\n      ctx.beginPath();\n      ctx.moveTo(x, padding);\n      ctx.lineTo(x, height - padding);\n      ctx.stroke();\n    }\n\n    // Draw axes labels\n    ctx.fillStyle = '#666';\n    ctx.font = '12px monospace';\n    ctx.textAlign = 'center';\n\n    // Y-axis labels\n    for (let i = 0; i <= 5; i++) {\n      const y = height - padding + 5 - (i / 5) * (height - 2 * padding);\n      const value = minValue + (i / 5) * valueRange;\n      ctx.fillText(`$${value.toFixed(0)}`, 20, y);\n    }\n\n    // X-axis labels\n    ctx.fillText('Start', padding, height - 10);\n    ctx.fillText('End', width - padding, height - 10);\n\n  }, []);\n\n  return (\n    <div className=\"w-full\">\n      <canvas \n        ref={canvasRef} \n        width={600} \n        height={300} \n        className=\"w-full h-64 border border-border rounded\"\n      />\n    </div>\n  );\n}","size_bytes":2579},"client/src/components/RightInspector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function RightInspector() {\n  const [selectedStrategy, setSelectedStrategy] = useState(\"Maker Queue Aware\");\n  const [selectedDataset, setSelectedDataset] = useState(\"NQ 2025-08 (5 days)\");\n\n  useEffect(() => {\n    const handleItemSelected = (event: any) => {\n      const { section, item } = event.detail;\n      if (section === 'strategies') {\n        setSelectedStrategy(item.name);\n      } else if (section === 'datasets') {\n        setSelectedDataset(item.name);\n      }\n    };\n\n    window.addEventListener('itemSelected', handleItemSelected);\n    return () => window.removeEventListener('itemSelected', handleItemSelected);\n  }, []);\n  return (\n    <div className=\"w-80 bg-card border-l border-border\">\n      <div className=\"p-3 border-b border-border\">\n        <h3 className=\"font-semibold text-sm\">Inspector</h3>\n      </div>\n      \n      <ScrollArea className=\"h-full\">\n        <div className=\"p-4 space-y-6\">\n          {/* Current Context */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3\">Current Context</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Strategy:</span>\n                <span className=\"font-mono text-xs\">{selectedStrategy}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Dataset:</span>\n                <span className=\"font-mono text-xs\">{selectedDataset}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Status:</span>\n                <span className=\"text-green-600 font-mono\">READY</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Data Quality:</span>\n                <span className=\"font-mono\">98.7%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Compile Status:</span>\n                <span className=\"text-green-600 font-mono\">✓ VALID</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Last Trade Details */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3\">Last Trade Details</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Side:</span>\n                <span className=\"text-blue-600 font-mono\">BUY</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Price:</span>\n                <span className=\"font-mono\">20004.75</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Size:</span>\n                <span className=\"font-mono\">2</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Fill Time:</span>\n                <span className=\"font-mono\">09:31:12.490</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Queue Rank:</span>\n                <span className=\"font-mono\">34 → 0</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Slippage:</span>\n                <span className=\"font-mono\">-0.25</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Risk Metrics */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3\">Risk Metrics</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Current PnL:</span>\n                <span className=\"text-green-600 font-mono\">+$2,847</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Max Drawdown:</span>\n                <span className=\"text-red-600 font-mono\">-$1,240</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Position:</span>\n                <span className=\"font-mono\">+3</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Win Rate:</span>\n                <span className=\"font-mono\">54.8%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Profit Factor:</span>\n                <span className=\"font-mono\">1.62</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Sharpe Ratio:</span>\n                <span className=\"font-mono\">2.1</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Order Parameters */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3\">Order Parameters</h4>\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"text-xs text-muted-foreground\">Order Type</label>\n                <Select defaultValue=\"limit\">\n                  <SelectTrigger className=\"h-8 text-sm\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"limit\">LIMIT</SelectItem>\n                    <SelectItem value=\"market\">MARKET</SelectItem>\n                    <SelectItem value=\"stop\">STOP</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Max Position:</span>\n                  <span className=\"font-mono\">±10</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Risk Limit:</span>\n                  <span className=\"font-mono\">$5,000</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Commission:</span>\n                  <span className=\"font-mono\">$0.25/side</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Session Info */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3\">Session Info</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Start Time:</span>\n                <span className=\"font-mono\">06:00 AM PST</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">End Time:</span>\n                <span className=\"font-mono\">03:30 PM PST</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Timezone:</span>\n                <span className=\"font-mono\">PST</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Total Events:</span>\n                <span className=\"font-mono\">2.4M</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":7987},"client/src/components/TopBar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, Square, RotateCcw, Settings } from \"lucide-react\";\nimport SettingsModal from \"@/components/SettingsModal\";\n\nexport default function TopBar() {\n  const [currentStrategy, setCurrentStrategy] = useState(\"Maker Queue Aware\");\n  const [currentDataset, setCurrentDataset] = useState(\"NQ 2025-08 (5 days)\");\n\n  useEffect(() => {\n    const handleItemSelected = (event: any) => {\n      const { section, item } = event.detail;\n      if (section === 'strategies') {\n        setCurrentStrategy(item.name);\n      } else if (section === 'datasets') {\n        setCurrentDataset(item.name);\n      }\n    };\n\n    window.addEventListener('itemSelected', handleItemSelected);\n    return () => window.removeEventListener('itemSelected', handleItemSelected);\n  }, []);\n  return (\n    <div className=\"h-14 bg-card border-b border-border flex items-center justify-between px-4\">\n      {/* Left: Logo/Title */}\n      <div className=\"flex items-center space-x-4\">\n        <h1 className=\"text-lg font-extrabold bg-[#00c3ff00] text-[#bd1c00]\">Qbacktest</h1>\n        <div className=\"text-sm text-muted-foreground\">\n          Strategy: {currentStrategy}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          Dataset: {currentDataset}\n        </div>\n      </div>\n      {/* Center: Backtest Controls */}\n      <div className=\"flex items-center space-x-2\">\n        <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n          <Play className=\"w-4 h-4 mr-1\" />\n          Start\n        </Button>\n        <Button size=\"sm\" variant=\"outline\">\n          <Square className=\"w-4 h-4 mr-1\" />\n          Stop\n        </Button>\n        <Button size=\"sm\" variant=\"outline\">\n          <RotateCcw className=\"w-4 h-4 mr-1\" />\n          Reset\n        </Button>\n      </div>\n      {/* Right: Status & Settings */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"text-sm\">\n          <span className=\"text-muted-foreground\">Status:</span>\n          <span className=\"ml-1 text-green-600 font-medium\">Ready</span>\n        </div>\n        <div className=\"text-sm\">\n          <span className=\"text-muted-foreground\">WS:</span>\n          <span className=\"ml-1 text-green-600 font-medium\">Connected</span>\n        </div>\n        <SettingsModal>\n          <Button size=\"sm\" variant=\"ghost\">\n            <Settings className=\"w-4 h-4\" />\n          </Button>\n        </SettingsModal>\n      </div>\n    </div>\n  );\n}","size_bytes":2528},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface UseWebSocketOptions {\n  onMessage?: (data: any) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  reconnectInterval?: number;\n}\n\nexport function useWebSocket(url: string, options: UseWebSocketOptions = {}) {\n  const [connectionStatus, setConnectionStatus] = useState<'Connecting' | 'Connected' | 'Disconnected'>('Disconnected');\n  const [lastMessage, setLastMessage] = useState<any>(null);\n  const websocketRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connect = () => {\n    if (websocketRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setConnectionStatus('Connecting');\n    \n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      websocketRef.current = new WebSocket(wsUrl);\n\n      websocketRef.current.onopen = () => {\n        setConnectionStatus('Connected');\n        options.onConnect?.();\n      };\n\n      websocketRef.current.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        setLastMessage(data);\n        options.onMessage?.(data);\n      };\n\n      websocketRef.current.onclose = () => {\n        setConnectionStatus('Disconnected');\n        options.onDisconnect?.();\n        \n        // Auto-reconnect\n        if (options.reconnectInterval !== 0) {\n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, options.reconnectInterval || 3000);\n        }\n      };\n\n      websocketRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnectionStatus('Disconnected');\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setConnectionStatus('Disconnected');\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    if (websocketRef.current) {\n      websocketRef.current.close();\n      websocketRef.current = null;\n    }\n    \n    setConnectionStatus('Disconnected');\n  };\n\n  const sendMessage = (message: any) => {\n    if (websocketRef.current?.readyState === WebSocket.OPEN) {\n      websocketRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      disconnect();\n    };\n  }, [url]);\n\n  return {\n    connectionStatus,\n    lastMessage,\n    sendMessage,\n    connect,\n    disconnect\n  };\n}","size_bytes":2622},"client/src/lib/backtesting.ts":{"content":"export interface BacktestParameters {\n  timeWindow: { start: string; end: string };\n  fees: number;\n  tickSize: number;\n  lotSize: number;\n  takeProfit: number;\n  stopLoss: number;\n  useMBO: boolean;\n  useLatency: boolean;\n  latencyProfile: {\n    distribution: string;\n    mean: number;\n    stdDev: number;\n  };\n  positionLimits: { maxLong: number; maxShort: number };\n}\n\nexport interface BacktestResults {\n  startCapital: number;\n  endCapital: number;\n  totalReturn: number;\n  maxDrawdown: number;\n  hitRate: number;\n  sharpeRatio: number;\n  profitFactor: number;\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  avgWin: number;\n  avgLoss: number;\n  largestWin: number;\n  largestLoss: number;\n}\n\nexport interface Trade {\n  timestamp: Date;\n  side: 'BUY' | 'SELL';\n  price: number;\n  size: number;\n  pnl: number;\n  slippage: number;\n  queueRank?: number;\n}\n\nexport interface MarketDataPoint {\n  timestamp: Date;\n  eventType: 'ADD' | 'CANCEL' | 'TRADE';\n  side?: 'BID' | 'ASK';\n  price?: number;\n  size?: number;\n  orderId?: string;\n}\n\nexport interface OrderBookLevel {\n  price: number;\n  size: number;\n  orders: number;\n}\n\nexport interface OrderBook {\n  bids: OrderBookLevel[];\n  asks: OrderBookLevel[];\n  timestamp: Date;\n}\n\nexport interface TradingContext {\n  book: OrderBook;\n  recentTrades: Trade[];\n  position: number;\n  unrealizedPnl: number;\n  capital: number;\n}\n\nexport class BacktestingEngine {\n  private parameters: BacktestParameters;\n  private position: number = 0;\n  private capital: number = 100000;\n  private trades: Trade[] = [];\n  private isRunning: boolean = false;\n  private orderBook: OrderBook;\n  private basePrice: number = 23713; // NQ starting price\n  private currentTime: Date = new Date();\n  private equityCurve: Array<{timestamp: Date, equity: number, drawdown: number}> = [];\n  private peakEquity: number = 100000;\n\n  constructor(parameters: BacktestParameters) {\n    this.parameters = parameters;\n    this.orderBook = this.initializeOrderBook();\n  }\n\n  private initializeOrderBook(): OrderBook {\n    const bids: OrderBookLevel[] = [];\n    const asks: OrderBookLevel[] = [];\n    \n    // Create realistic NQ order book around 23713\n    for (let i = 0; i < 10; i++) {\n      bids.push({\n        price: this.basePrice - (i + 1) * this.parameters.tickSize,\n        size: Math.floor(Math.random() * 50) + 10,\n        orders: Math.floor(Math.random() * 20) + 5\n      });\n      \n      asks.push({\n        price: this.basePrice + (i + 1) * this.parameters.tickSize,\n        size: Math.floor(Math.random() * 50) + 10,\n        orders: Math.floor(Math.random() * 20) + 5\n      });\n    }\n    \n    return {\n      bids: bids.sort((a, b) => b.price - a.price),\n      asks: asks.sort((a, b) => a.price - b.price),\n      timestamp: new Date()\n    };\n  }\n\n  async runBacktest(strategyCode: string, marketData: MarketDataPoint[]): Promise<BacktestResults> {\n    this.isRunning = true;\n    this.position = 0;\n    this.capital = 100000;\n    this.trades = [];\n    this.equityCurve = [];\n    this.peakEquity = 100000;\n\n    // Generate synthetic NQ market data if none provided\n    const processedData = marketData.length > 0 ? marketData : this.generateNQMarketData();\n    \n    // Execute strategy on each market data point\n    for (let i = 0; i < processedData.length && this.isRunning; i++) {\n      const dataPoint = processedData[i];\n      this.currentTime = dataPoint.timestamp;\n      \n      // Update order book based on market data\n      this.updateOrderBook(dataPoint);\n      \n      // Execute trading strategy\n      await this.executeStrategy(strategyCode, dataPoint, i);\n      \n      // Update equity curve\n      this.updateEquityCurve();\n      \n      // Simulate processing time\n      if (i % 50 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 1));\n      }\n    }\n\n    return this.calculateResults();\n  }\n\n  private generateNQMarketData(): MarketDataPoint[] {\n    const data: MarketDataPoint[] = [];\n    const startTime = new Date();\n    let currentPrice = this.basePrice;\n    \n    // Generate 5000 market events (about 1 trading session)\n    for (let i = 0; i < 5000; i++) {\n      const timestamp = new Date(startTime.getTime() + i * 1000); // 1 second intervals\n      \n      // Price random walk with slight upward bias\n      const priceChange = (Math.random() - 0.48) * this.parameters.tickSize * 4;\n      currentPrice = Math.max(23600, Math.min(23800, currentPrice + priceChange));\n      \n      // Generate different event types\n      const eventType = Math.random() < 0.7 ? 'ADD' : Math.random() < 0.9 ? 'TRADE' : 'CANCEL';\n      const side = Math.random() < 0.5 ? 'BID' : 'ASK';\n      \n      data.push({\n        timestamp,\n        eventType: eventType as 'ADD' | 'CANCEL' | 'TRADE',\n        side,\n        price: Math.round(currentPrice / this.parameters.tickSize) * this.parameters.tickSize,\n        size: Math.floor(Math.random() * 20) + 1,\n        orderId: `order_${i}`\n      });\n    }\n    \n    return data;\n  }\n\n  private updateOrderBook(dataPoint: MarketDataPoint): void {\n    if (!dataPoint.price || !dataPoint.side) return;\n    \n    const levels = dataPoint.side === 'BID' ? this.orderBook.bids : this.orderBook.asks;\n    const levelIndex = levels.findIndex(level => Math.abs(level.price - dataPoint.price!) < 0.01);\n    \n    if (dataPoint.eventType === 'ADD') {\n      if (levelIndex >= 0) {\n        levels[levelIndex].size += dataPoint.size || 0;\n        levels[levelIndex].orders += 1;\n      } else {\n        levels.push({\n          price: dataPoint.price,\n          size: dataPoint.size || 0,\n          orders: 1\n        });\n        levels.sort((a, b) => dataPoint.side === 'BID' ? b.price - a.price : a.price - b.price);\n      }\n    } else if (dataPoint.eventType === 'CANCEL' && levelIndex >= 0) {\n      levels[levelIndex].size = Math.max(0, levels[levelIndex].size - (dataPoint.size || 0));\n      levels[levelIndex].orders = Math.max(0, levels[levelIndex].orders - 1);\n      \n      if (levels[levelIndex].size <= 0) {\n        levels.splice(levelIndex, 1);\n      }\n    }\n    \n    this.orderBook.timestamp = dataPoint.timestamp;\n  }\n\n  private async executeStrategy(strategyCode: string, dataPoint: MarketDataPoint, index: number): Promise<void> {\n    try {\n      // Create trading context\n      const context: TradingContext = {\n        book: this.orderBook,\n        recentTrades: this.trades.slice(-10),\n        position: this.position,\n        unrealizedPnl: this.calculateUnrealizedPnl(),\n        capital: this.capital\n      };\n      \n      // Simple strategy logic (since we can't execute user code safely)\n      const signal = this.analyzeMarket(context, dataPoint);\n      \n      if (signal && Math.abs(this.position) < this.parameters.positionLimits.maxLong) {\n        const trade = this.executeTrade(signal, dataPoint);\n        if (trade) {\n          this.trades.push(trade);\n          this.position += trade.side === 'BUY' ? trade.size : -trade.size;\n          this.capital += trade.pnl;\n        }\n      }\n      \n      // Risk management\n      this.checkRiskLimits();\n      \n    } catch (error) {\n      console.error('Strategy execution error:', error);\n    }\n  }\n\n  private analyzeMarket(context: TradingContext, dataPoint: MarketDataPoint): 'BUY' | 'SELL' | null {\n    if (!this.orderBook.bids.length || !this.orderBook.asks.length) return null;\n    \n    const bestBid = this.orderBook.bids[0];\n    const bestAsk = this.orderBook.asks[0];\n    const spread = bestAsk.price - bestBid.price;\n    \n    // Calculate order book imbalance\n    const bidVolume = this.orderBook.bids.slice(0, 5).reduce((sum, level) => sum + level.size, 0);\n    const askVolume = this.orderBook.asks.slice(0, 5).reduce((sum, level) => sum + level.size, 0);\n    const imbalance = (bidVolume - askVolume) / (bidVolume + askVolume);\n    \n    // Simple mean reversion + momentum strategy\n    const recentPrices = this.trades.slice(-20).map(t => t.price);\n    if (recentPrices.length < 10) return null;\n    \n    const avgPrice = recentPrices.reduce((sum, p) => sum + p, 0) / recentPrices.length;\n    const currentPrice = bestBid.price + spread / 2;\n    const priceDeviation = (currentPrice - avgPrice) / avgPrice;\n    \n    // Trading conditions\n    const strongImbalance = Math.abs(imbalance) > 0.3;\n    const tightSpread = spread <= this.parameters.tickSize * 2;\n    const momentum = priceDeviation > 0.001;\n    \n    if (strongImbalance && tightSpread && Math.random() > 0.95) {\n      if (imbalance > 0 && momentum) return 'BUY';\n      if (imbalance < 0 && !momentum) return 'SELL';\n    }\n    \n    return null;\n  }\n\n  private executeTrade(signal: 'BUY' | 'SELL', dataPoint: MarketDataPoint): Trade | null {\n    if (!this.orderBook.bids.length || !this.orderBook.asks.length) return null;\n    \n    const bestBid = this.orderBook.bids[0];\n    const bestAsk = this.orderBook.asks[0];\n    \n    // Determine execution price with realistic slippage\n    let executionPrice: number;\n    let slippage: number = 0;\n    \n    if (signal === 'BUY') {\n      executionPrice = bestAsk.price;\n      // Add latency-based slippage\n      if (this.parameters.useLatency) {\n        const latency = this.simulateLatency();\n        slippage = latency > 50 ? this.parameters.tickSize * 0.5 : 0;\n        executionPrice += slippage;\n      }\n    } else {\n      executionPrice = bestBid.price;\n      if (this.parameters.useLatency) {\n        const latency = this.simulateLatency();\n        slippage = latency > 50 ? -this.parameters.tickSize * 0.5 : 0;\n        executionPrice += slippage;\n      }\n    }\n    \n    const size = this.parameters.lotSize;\n    const commission = this.parameters.fees;\n    \n    // Calculate PnL for this trade\n    let pnl = 0;\n    if (this.trades.length > 0) {\n      const lastTrade = this.trades[this.trades.length - 1];\n      if ((lastTrade.side === 'BUY' && signal === 'SELL') || \n          (lastTrade.side === 'SELL' && signal === 'BUY')) {\n        // Closing trade - calculate realized PnL\n        const priceDiff = signal === 'SELL' ? \n          (executionPrice - lastTrade.price) : \n          (lastTrade.price - executionPrice);\n        pnl = (priceDiff * size * 20) - commission; // NQ multiplier is $20 per point\n      }\n    }\n    \n    return {\n      timestamp: dataPoint.timestamp,\n      side: signal,\n      price: executionPrice,\n      size,\n      pnl,\n      slippage: Math.abs(slippage),\n      queueRank: this.simulateQueuePosition()\n    };\n  }\n\n  private simulateLatency(): number {\n    const { distribution, mean, stdDev } = this.parameters.latencyProfile;\n    \n    if (distribution === \"Gaussian\") {\n      return Math.max(5, mean + stdDev * (Math.random() - 0.5) * 4);\n    } else if (distribution === \"Uniform\") {\n      return mean + (Math.random() - 0.5) * stdDev * 2;\n    } else {\n      // Exponential\n      return mean + Math.random() * stdDev;\n    }\n  }\n\n  private simulateQueuePosition(): number {\n    return Math.floor(Math.random() * 50) + 1;\n  }\n\n  private calculateUnrealizedPnl(): number {\n    if (this.position === 0 || !this.orderBook.bids.length || !this.orderBook.asks.length) {\n      return 0;\n    }\n    \n    const markPrice = (this.orderBook.bids[0].price + this.orderBook.asks[0].price) / 2;\n    const avgEntryPrice = this.trades.length > 0 ? \n      this.trades.filter(t => (t.side === 'BUY') === (this.position > 0))\n        .reduce((sum, t, _, arr) => sum + t.price / arr.length, 0) : markPrice;\n    \n    return (markPrice - avgEntryPrice) * this.position * 20; // NQ multiplier\n  }\n\n  private updateEquityCurve(): void {\n    const currentEquity = this.capital + this.calculateUnrealizedPnl();\n    this.peakEquity = Math.max(this.peakEquity, currentEquity);\n    const drawdown = (this.peakEquity - currentEquity) / this.peakEquity;\n    \n    this.equityCurve.push({\n      timestamp: new Date(this.currentTime),\n      equity: currentEquity,\n      drawdown\n    });\n  }\n\n  private checkRiskLimits(): void {\n    const unrealizedPnl = this.calculateUnrealizedPnl();\n    const totalEquity = this.capital + unrealizedPnl;\n    \n    // Stop loss check\n    if (Math.abs(unrealizedPnl) > this.parameters.stopLoss * 20 * Math.abs(this.position)) {\n      // Force close position\n      if (this.position !== 0) {\n        const closePrice = this.orderBook.bids.length > 0 ? this.orderBook.bids[0].price : this.basePrice;\n        const closeTrade: Trade = {\n          timestamp: this.currentTime,\n          side: this.position > 0 ? 'SELL' : 'BUY',\n          price: closePrice,\n          size: Math.abs(this.position),\n          pnl: unrealizedPnl - this.parameters.fees,\n          slippage: this.parameters.tickSize,\n          queueRank: 1\n        };\n        \n        this.trades.push(closeTrade);\n        this.capital += closeTrade.pnl;\n        this.position = 0;\n      }\n    }\n  }\n\n  private generateTrade(dataPoint: MarketDataPoint): Trade | null {\n    if (!dataPoint.price) return null;\n\n    const side = Math.random() > 0.5 ? 'BUY' : 'SELL';\n    const size = 1;\n    const slippage = (Math.random() - 0.5) * 0.5; // Random slippage\n    const price = dataPoint.price + slippage;\n    const pnl = (Math.random() - 0.45) * 100; // Slightly positive bias\n\n    return {\n      timestamp: dataPoint.timestamp,\n      side,\n      price,\n      size,\n      pnl,\n      slippage,\n      queueRank: Math.floor(Math.random() * 200),\n    };\n  }\n\n  private calculateResults(): BacktestResults {\n    const winningTrades = this.trades.filter(t => t.pnl > 0);\n    const losingTrades = this.trades.filter(t => t.pnl < 0);\n    const totalPnl = this.trades.reduce((sum, t) => sum + t.pnl, 0);\n    const startCapital = 100000;\n    \n    // Calculate max drawdown from equity curve\n    let maxDrawdown = 0;\n    let peak = startCapital;\n    \n    for (const point of this.equityCurve) {\n      if (point.equity > peak) {\n        peak = point.equity;\n      }\n      const drawdown = (peak - point.equity) / peak;\n      maxDrawdown = Math.max(maxDrawdown, drawdown);\n    }\n    \n    // Calculate Sharpe ratio\n    const returns = this.equityCurve.map((point, i) => \n      i > 0 ? (point.equity - this.equityCurve[i-1].equity) / this.equityCurve[i-1].equity : 0\n    ).slice(1);\n    \n    const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n    const returnStdDev = Math.sqrt(\n      returns.reduce((sum, r) => sum + Math.pow(r - avgReturn, 2), 0) / returns.length\n    );\n    const sharpeRatio = returnStdDev > 0 ? (avgReturn / returnStdDev) * Math.sqrt(252) : 0;\n    \n    // Calculate profit factor\n    const grossProfit = winningTrades.reduce((sum, t) => sum + t.pnl, 0);\n    const grossLoss = Math.abs(losingTrades.reduce((sum, t) => sum + t.pnl, 0));\n    const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : grossProfit > 0 ? 999 : 0;\n\n    return {\n      startCapital,\n      endCapital: this.capital,\n      totalReturn: ((this.capital - startCapital) / startCapital) * 100,\n      maxDrawdown: maxDrawdown * 100,\n      hitRate: this.trades.length > 0 ? (winningTrades.length / this.trades.length) * 100 : 0,\n      sharpeRatio: isFinite(sharpeRatio) ? sharpeRatio : 0,\n      profitFactor: isFinite(profitFactor) ? profitFactor : 0,\n      totalTrades: this.trades.length,\n      winningTrades: winningTrades.length,\n      losingTrades: losingTrades.length,\n      avgWin: winningTrades.length > 0 ? grossProfit / winningTrades.length : 0,\n      avgLoss: losingTrades.length > 0 ? grossLoss / losingTrades.length : 0,\n      largestWin: winningTrades.length > 0 ? Math.max(...winningTrades.map(t => t.pnl)) : 0,\n      largestLoss: losingTrades.length > 0 ? Math.min(...losingTrades.map(t => t.pnl)) : 0,\n    };\n  }\n\n  stop(): void {\n    this.isRunning = false;\n  }\n}\n","size_bytes":15628},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/backtesting.tsx":{"content":"import BacktestingEngine from \"@/components/BacktestingEngine\";\n\nexport default function BacktestingPage() {\n  return (\n    <div className=\"h-screen overflow-hidden\">\n      <BacktestingEngine />\n    </div>\n  );\n}\n","size_bytes":213},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/tabs/LatencyLabTab.tsx":{"content":"import { useState } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Clock, Zap, Target, TrendingUp, AlertTriangle } from \"lucide-react\";\n\nexport default function LatencyLabTab() {\n  const [latencyProfile, setLatencyProfile] = useState(\"gaussian\");\n  const [meanLatency, setMeanLatency] = useState([150]);\n  const [latencyStdDev, setLatencyStdDev] = useState([25]);\n  const [networkJitter, setNetworkJitter] = useState([10]);\n  const [simulationRuns, setSimulationRuns] = useState(1000);\n\n  // Latency distribution data for visualization\n  const generateLatencyDistribution = () => {\n    const data = [];\n    const mean = meanLatency[0];\n    const stdDev = latencyStdDev[0];\n    \n    for (let i = 0; i < 200; i++) {\n      const x = i * 2; // 0 to 400 microseconds\n      let y;\n      \n      if (latencyProfile === \"gaussian\") {\n        y = Math.exp(-0.5 * Math.pow((x - mean) / stdDev, 2)) / (stdDev * Math.sqrt(2 * Math.PI));\n      } else if (latencyProfile === \"exponential\") {\n        const lambda = 1 / mean;\n        y = lambda * Math.exp(-lambda * x);\n      } else {\n        // Uniform distribution\n        y = x >= (mean - stdDev) && x <= (mean + stdDev) ? 1 / (2 * stdDev) : 0;\n      }\n      \n      data.push({ x, y: y * 1000 }); // Scale for visibility\n    }\n    return data;\n  };\n\n  const latencyData = generateLatencyDistribution();\n\n  // Percentile data\n  const latencyPercentiles = [\n    { percentile: \"P50\", value: meanLatency[0] },\n    { percentile: \"P75\", value: meanLatency[0] + latencyStdDev[0] * 0.67 },\n    { percentile: \"P90\", value: meanLatency[0] + latencyStdDev[0] * 1.28 },\n    { percentile: \"P95\", value: meanLatency[0] + latencyStdDev[0] * 1.64 },\n    { percentile: \"P99\", value: meanLatency[0] + latencyStdDev[0] * 2.33 },\n    { percentile: \"P99.9\", value: meanLatency[0] + latencyStdDev[0] * 3.09 }\n  ];\n\n  // Execution quality metrics\n  const executionMetrics = {\n    fillRate: 94.2,\n    averageSlippage: 0.12,\n    marketImpact: 0.08,\n    timingRisk: 2.3,\n    implementationShortfall: 1.7\n  };\n\n  return (\n    <div className=\"flex flex-1 flex-col\">\n      <div className=\"p-4 border-b border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">Latency Modeling & Analysis</h3>\n          <div className=\"flex space-x-2\">\n            <Button size=\"sm\" variant=\"outline\">Import Profile</Button>\n            <Button size=\"sm\" variant=\"outline\">Export Settings</Button>\n            <Button size=\"sm\">Run Simulation</Button>\n          </div>\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4\">\n          <Tabs defaultValue=\"distribution\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"distribution\">Distribution</TabsTrigger>\n              <TabsTrigger value=\"network\">Network Model</TabsTrigger>\n              <TabsTrigger value=\"execution\">Execution Impact</TabsTrigger>\n              <TabsTrigger value=\"calibration\">Calibration</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"distribution\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Latency Configuration */}\n                <div className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Latency Profile</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-sm\">Distribution Type</Label>\n                        <Select value={latencyProfile} onValueChange={setLatencyProfile}>\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"gaussian\">Gaussian (Normal)</SelectItem>\n                            <SelectItem value=\"exponential\">Exponential</SelectItem>\n                            <SelectItem value=\"uniform\">Uniform</SelectItem>\n                            <SelectItem value=\"weibull\">Weibull</SelectItem>\n                            <SelectItem value=\"lognormal\">Log-Normal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-sm\">Mean Latency: {meanLatency[0]}μs</Label>\n                        <Slider\n                          value={meanLatency}\n                          onValueChange={setMeanLatency}\n                          max={500}\n                          min={50}\n                          step={5}\n                          className=\"mt-2\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label className=\"text-sm\">Std Deviation: {latencyStdDev[0]}μs</Label>\n                        <Slider\n                          value={latencyStdDev}\n                          onValueChange={setLatencyStdDev}\n                          max={100}\n                          min={5}\n                          step={1}\n                          className=\"mt-2\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label className=\"text-sm\">Network Jitter: {networkJitter[0]}μs</Label>\n                        <Slider\n                          value={networkJitter}\n                          onValueChange={setNetworkJitter}\n                          max={50}\n                          min={0}\n                          step={1}\n                          className=\"mt-2\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox id=\"queue-delays\" />\n                          <Label htmlFor=\"queue-delays\" className=\"text-sm\">Model queue delays</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox id=\"processing-delays\" />\n                          <Label htmlFor=\"processing-delays\" className=\"text-sm\">Include processing delays</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox id=\"market-hours\" />\n                          <Label htmlFor=\"market-hours\" className=\"text-sm\">Market hours variations</Label>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Latency Percentiles */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Latency Percentiles</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {latencyPercentiles.map((item) => (\n                          <div key={item.percentile} className=\"flex justify-between items-center\">\n                            <span className=\"text-sm font-medium\">{item.percentile}</span>\n                            <span className=\"font-mono text-sm\">{item.value.toFixed(1)}μs</span>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Latency Distribution Visualization */}\n                <div className=\"lg:col-span-2\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Latency Distribution</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-80 w-full bg-muted rounded-lg relative overflow-hidden\">\n                        <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                          <defs>\n                            <linearGradient id=\"latencyGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                              <stop offset=\"0%\" style={{ stopColor: '#3b82f6', stopOpacity: 0.6 }} />\n                              <stop offset=\"100%\" style={{ stopColor: '#3b82f6', stopOpacity: 0.1 }} />\n                            </linearGradient>\n                          </defs>\n\n                          {/* Grid lines */}\n                          {[0, 1, 2, 3, 4].map(i => (\n                            <line key={`h-${i}`} x1=\"0\" y1={i * 60} x2=\"100%\" y2={i * 60} stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.3\" />\n                          ))}\n                          {[0, 1, 2, 3, 4, 5].map(i => (\n                            <line key={`v-${i}`} x1={`${i * 20}%`} y1=\"0\" x2={`${i * 20}%`} y2=\"100%\" stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.3\" />\n                          ))}\n\n                          {/* Distribution curve */}\n                          <path\n                            d={`M 0 ${300 - latencyData[0].y} ${latencyData.map((point, i) => \n                              `L ${(point.x / 400) * 800} ${300 - point.y * 50}`\n                            ).join(' ')}`}\n                            stroke=\"#3b82f6\"\n                            strokeWidth=\"2\"\n                            fill=\"none\"\n                          />\n\n                          {/* Fill under curve */}\n                          <path\n                            d={`M 0 300 ${latencyData.map((point, i) => \n                              `L ${(point.x / 400) * 800} ${300 - point.y * 50}`\n                            ).join(' ')} L 800 300 Z`}\n                            fill=\"url(#latencyGradient)\"\n                          />\n\n                          {/* Percentile markers */}\n                          {[50, 95, 99].map(p => {\n                            const percentile = latencyPercentiles.find(item => item.percentile === `P${p}`);\n                            if (percentile) {\n                              const x = (percentile.value / 400) * 800;\n                              return (\n                                <g key={p}>\n                                  <line x1={x} y1=\"0\" x2={x} y2=\"300\" stroke=\"#ef4444\" strokeWidth=\"1\" strokeDasharray=\"4,4\" />\n                                  <text x={x + 5} y=\"20\" className=\"text-xs fill-red-600\">P{p}</text>\n                                </g>\n                              );\n                            }\n                            return null;\n                          })}\n\n                          {/* Axis labels */}\n                          <text x=\"10\" y=\"20\" className=\"text-xs fill-current\">Probability Density</text>\n                          <text x=\"750\" y=\"290\" className=\"text-xs fill-current\">Latency (μs)</text>\n                        </svg>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"network\" className=\"space-y-4\">\n              {/* Network Topology Visualization */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Network Topology & Latency Map</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 w-full bg-white rounded border relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"256\" className=\"absolute inset-0\">\n                      <defs>\n                        <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\n                          <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#6b7280\" />\n                        </marker>\n                        <linearGradient id=\"latencyGradient1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor=\"#22c55e\" />\n                          <stop offset=\"100%\" stopColor=\"#eab308\" />\n                        </linearGradient>\n                        <linearGradient id=\"latencyGradient2\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor=\"#eab308\" />\n                          <stop offset=\"100%\" stopColor=\"#ef4444\" />\n                        </linearGradient>\n                      </defs>\n\n                      {/* Network connections with latency visualization */}\n                      {/* Trading System to Co-location */}\n                      <line x1=\"100\" y1=\"120\" x2=\"200\" y2=\"120\" stroke=\"url(#latencyGradient1)\" strokeWidth=\"4\" markerEnd=\"url(#arrowhead)\" />\n                      <text x=\"150\" y=\"110\" fontSize=\"10\" fill=\"#16a34a\" textAnchor=\"middle\" fontWeight=\"bold\">12μs</text>\n                      \n                      {/* Co-location to Exchange */}\n                      <line x1=\"200\" y1=\"120\" x2=\"350\" y2=\"120\" stroke=\"url(#latencyGradient1)\" strokeWidth=\"4\" markerEnd=\"url(#arrowhead)\" />\n                      <text x=\"275\" y=\"110\" fontSize=\"10\" fill=\"#16a34a\" textAnchor=\"middle\" fontWeight=\"bold\">35μs</text>\n                      \n                      {/* Exchange to Market Data */}\n                      <line x1=\"350\" y1=\"90\" x2=\"450\" y2=\"60\" stroke=\"url(#latencyGradient1)\" strokeWidth=\"3\" markerEnd=\"url(#arrowhead)\" />\n                      <text x=\"400\" y=\"70\" fontSize=\"10\" fill=\"#16a34a\" textAnchor=\"middle\" fontWeight=\"bold\">8μs</text>\n                      \n                      {/* Alternative routes with higher latency */}\n                      <path d=\"M 100 140 Q 200 180 350 140\" stroke=\"url(#latencyGradient2)\" strokeWidth=\"2\" fill=\"none\" strokeDasharray=\"4,4\" markerEnd=\"url(#arrowhead)\" />\n                      <text x=\"225\" y=\"175\" fontSize=\"9\" fill=\"#dc2626\" textAnchor=\"middle\">Backup: 145μs</text>\n                      \n                      {/* Internet route */}\n                      <path d=\"M 100 160 Q 300 220 500 160\" stroke=\"#ef4444\" strokeWidth=\"2\" fill=\"none\" strokeDasharray=\"8,4\" markerEnd=\"url(#arrowhead)\" />\n                      <text x=\"300\" y=\"215\" fontSize=\"9\" fill=\"#dc2626\" textAnchor=\"middle\">Internet: 850μs</text>\n\n                      {/* Network nodes */}\n                      <g transform=\"translate(85, 105)\">\n                        <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" rx=\"4\" fill=\"#3b82f6\" stroke=\"white\" strokeWidth=\"2\"/>\n                        <text x=\"15\" y=\"20\" fontSize=\"8\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">SYS</text>\n                        <text x=\"15\" y=\"45\" fontSize=\"10\" fill=\"#374151\" textAnchor=\"middle\" fontWeight=\"bold\">Trading System</text>\n                      </g>\n                      \n                      <g transform=\"translate(185, 105)\">\n                        <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" rx=\"4\" fill=\"#10b981\" stroke=\"white\" strokeWidth=\"2\"/>\n                        <text x=\"15\" y=\"20\" fontSize=\"8\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">COL</text>\n                        <text x=\"15\" y=\"45\" fontSize=\"10\" fill=\"#374151\" textAnchor=\"middle\" fontWeight=\"bold\">Co-location</text>\n                      </g>\n                      \n                      <g transform=\"translate(335, 105)\">\n                        <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" rx=\"4\" fill=\"#f59e0b\" stroke=\"white\" strokeWidth=\"2\"/>\n                        <text x=\"15\" y=\"20\" fontSize=\"8\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">CME</text>\n                        <text x=\"15\" y=\"45\" fontSize=\"10\" fill=\"#374151\" textAnchor=\"middle\" fontWeight=\"bold\">Exchange</text>\n                      </g>\n                      \n                      <g transform=\"translate(435, 45)\">\n                        <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" rx=\"4\" fill=\"#8b5cf6\" stroke=\"white\" strokeWidth=\"2\"/>\n                        <text x=\"15\" y=\"20\" fontSize=\"8\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">MD</text>\n                        <text x=\"15\" y=\"45\" fontSize=\"10\" fill=\"#374151\" textAnchor=\"middle\" fontWeight=\"bold\">Market Data</text>\n                      </g>\n                      \n                      <g transform=\"translate(485, 145)\">\n                        <rect x=\"0\" y=\"0\" width=\"30\" height=\"30\" rx=\"4\" fill=\"#ef4444\" stroke=\"white\" strokeWidth=\"2\"/>\n                        <text x=\"15\" y=\"20\" fontSize=\"8\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">NET</text>\n                        <text x=\"15\" y=\"45\" fontSize=\"10\" fill=\"#374151\" textAnchor=\"middle\" fontWeight=\"bold\">Internet</text>\n                      </g>\n\n                      {/* Legend */}\n                      <g transform=\"translate(550, 30)\">\n                        <rect x=\"0\" y=\"0\" width=\"150\" height=\"100\" fill=\"white\" stroke=\"#e5e7eb\" rx=\"4\" fillOpacity=\"0.95\"/>\n                        <text x=\"10\" y=\"15\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Latency Paths</text>\n                        \n                        <line x1=\"10\" y1=\"25\" x2=\"30\" y2=\"25\" stroke=\"#22c55e\" strokeWidth=\"3\"/>\n                        <text x=\"35\" y=\"28\" fontSize=\"9\" fill=\"#374151\">Optimal (&lt;50μs)</text>\n                        \n                        <line x1=\"10\" y1=\"40\" x2=\"30\" y2=\"40\" stroke=\"#eab308\" strokeWidth=\"3\"/>\n                        <text x=\"35\" y=\"43\" fontSize=\"9\" fill=\"#374151\">Warning (50-150μs)</text>\n                        \n                        <line x1=\"10\" y1=\"55\" x2=\"30\" y2=\"55\" stroke=\"#ef4444\" strokeWidth=\"2\" strokeDasharray=\"4,4\"/>\n                        <text x=\"35\" y=\"58\" fontSize=\"9\" fill=\"#374151\">Backup (150μs+)</text>\n                        \n                        <line x1=\"10\" y1=\"70\" x2=\"30\" y2=\"70\" stroke=\"#ef4444\" strokeWidth=\"2\" strokeDasharray=\"8,4\"/>\n                        <text x=\"35\" y=\"73\" fontSize=\"9\" fill=\"#374151\">Internet (800μs+)</text>\n                        \n                        <text x=\"10\" y=\"90\" fontSize=\"9\" fill=\"#6b7280\">Total Path: ~55μs</text>\n                      </g>\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Network Configuration */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Network Configuration</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-sm\">Venue Latency</Label>\n                        <Input type=\"number\" defaultValue=\"85\" className=\"mt-1\" />\n                        <p className=\"text-xs text-muted-foreground mt-1\">Microseconds to exchange</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Co-location Latency</Label>\n                        <Input type=\"number\" defaultValue=\"12\" className=\"mt-1\" />\n                        <p className=\"text-xs text-muted-foreground mt-1\">Rack-to-rack latency</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-sm\">Processing Time</Label>\n                        <Input type=\"number\" defaultValue=\"35\" className=\"mt-1\" />\n                        <p className=\"text-xs text-muted-foreground mt-1\">Order processing delay</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Serialization</Label>\n                        <Input type=\"number\" defaultValue=\"8\" className=\"mt-1\" />\n                        <p className=\"text-xs text-muted-foreground mt-1\">Message encoding time</p>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Network Provider</Label>\n                      <Select defaultValue=\"premium\">\n                        <SelectTrigger className=\"mt-1\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"premium\">Premium (Microwave)</SelectItem>\n                          <SelectItem value=\"fiber\">Fiber Optic</SelectItem>\n                          <SelectItem value=\"satellite\">Satellite</SelectItem>\n                          <SelectItem value=\"internet\">Internet VPN</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"burst-traffic\" defaultChecked />\n                        <Label htmlFor=\"burst-traffic\" className=\"text-sm\">Model burst traffic</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"congestion\" defaultChecked />\n                        <Label htmlFor=\"congestion\" className=\"text-sm\">Network congestion effects</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"packet-loss\" />\n                        <Label htmlFor=\"packet-loss\" className=\"text-sm\">Packet loss simulation</Label>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Real-time Monitoring */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Real-time Latency Monitor</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium\">Current Latency</span>\n                        <span className=\"font-mono text-lg text-green-600\">147μs</span>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Last 1min avg</span>\n                          <span className=\"font-mono\">152μs</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Last 5min avg</span>\n                          <span className=\"font-mono\">148μs</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Last 1hr avg</span>\n                          <span className=\"font-mono\">151μs</span>\n                        </div>\n                      </div>\n\n                      <div className=\"h-32 w-full bg-white rounded border relative overflow-hidden\">\n                        <svg width=\"100%\" height=\"128\" className=\"absolute inset-0\">\n                          {/* Grid lines */}\n                          {[0, 1, 2, 3].map(i => (\n                            <line key={i} x1=\"0\" y1={i * 32} x2=\"100%\" y2={i * 32} stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                          ))}\n                          \n                          {/* Real-time latency line */}\n                          <path\n                            d={`M 0 ${64 + Math.sin(0) * 20} ${Array.from({ length: 50 }, (_, i) => {\n                              const x = (i / 50) * 400;\n                              const y = 64 + Math.sin(i * 0.2) * 15 + (Math.random() - 0.5) * 10;\n                              return `L ${x} ${y}`;\n                            }).join(' ')}`}\n                            stroke=\"#22c55e\"\n                            strokeWidth=\"2\"\n                            fill=\"none\"\n                          />\n                          \n                          {/* Threshold lines */}\n                          <line x1=\"0\" y1=\"48\" x2=\"100%\" y2=\"48\" stroke=\"#eab308\" strokeWidth=\"1\" strokeDasharray=\"2,2\" />\n                          <line x1=\"0\" y1=\"32\" x2=\"100%\" y2=\"32\" stroke=\"#ef4444\" strokeWidth=\"1\" strokeDasharray=\"2,2\" />\n                          \n                          {/* Current value indicator */}\n                          <circle cx=\"380\" cy=\"58\" r=\"3\" fill=\"#22c55e\" stroke=\"white\" strokeWidth=\"1\"/>\n                          \n                          {/* Labels */}\n                          <text x=\"10\" y=\"15\" fontSize=\"10\" fill=\"#6b7280\">200μs</text>\n                          <text x=\"10\" y=\"35\" fontSize=\"10\" fill=\"#6b7280\">150μs</text>\n                          <text x=\"10\" y=\"75\" fontSize=\"10\" fill=\"#6b7280\">100μs</text>\n                          <text x=\"350\" y=\"120\" fontSize=\"10\" fill=\"#6b7280\">Last 60s</text>\n                        </svg>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          <span>Optimal (&lt;150μs)</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                          <span>Warning (150-200μs)</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                          <span>Critical (&gt;200μs)</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-gray-500 rounded-full\"></div>\n                          <span>Timeout (&gt;1ms)</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"execution\" className=\"space-y-4\">\n              {/* Execution Quality Metrics */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Fill Rate</CardTitle>\n                    <Target className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">{executionMetrics.fillRate}%</div>\n                    <Progress value={executionMetrics.fillRate} className=\"mt-2\" />\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Avg Slippage</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{executionMetrics.averageSlippage} bps</div>\n                    <p className=\"text-xs text-muted-foreground\">vs benchmark 0.15 bps</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Market Impact</CardTitle>\n                    <Zap className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{executionMetrics.marketImpact} bps</div>\n                    <p className=\"text-xs text-muted-foreground\">Linear + sqrt impact</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Timing Risk</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{executionMetrics.timingRisk} bps</div>\n                    <p className=\"text-xs text-muted-foreground\">Due to latency variance</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Latency Impact Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Latency Impact on Execution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div>\n                      <h4 className=\"font-medium mb-3\">Latency vs Fill Rate</h4>\n                      <div className=\"h-48 w-full bg-white rounded border relative overflow-hidden\">\n                        <svg width=\"100%\" height=\"192\" className=\"absolute inset-0\">\n                          {/* Grid */}\n                          {[0, 1, 2, 3, 4, 5].map(i => (\n                            <g key={i}>\n                              <line x1=\"40\" y1={30 + i * 25} x2=\"350\" y2={30 + i * 25} stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                              <text x=\"35\" y={35 + i * 25} fontSize=\"9\" fill=\"#6b7280\" textAnchor=\"end\">\n                                {100 - i * 5}%\n                              </text>\n                            </g>\n                          ))}\n                          {[0, 1, 2, 3, 4, 5, 6].map(i => (\n                            <g key={i}>\n                              <line x1={40 + i * 50} y1=\"30\" x2={40 + i * 50} y2=\"155\" stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                              <text x={40 + i * 50} y=\"170\" fontSize=\"9\" fill=\"#6b7280\" textAnchor=\"middle\">\n                                {50 + i * 50}μs\n                              </text>\n                            </g>\n                          ))}\n                          \n                          {/* Fill rate curve (decreasing with latency) */}\n                          <path\n                            d=\"M40,35 Q90,40 140,50 Q190,65 240,85 Q290,110 340,140\"\n                            stroke=\"#3b82f6\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                          />\n                          \n                          {/* Data points */}\n                          {[\n                            {x: 40, y: 35, latency: 50, rate: 98.5},\n                            {x: 90, y: 42, latency: 100, rate: 96.2},\n                            {x: 140, y: 52, latency: 150, rate: 94.2},\n                            {x: 190, y: 67, latency: 200, rate: 91.8},\n                            {x: 240, y: 87, latency: 250, rate: 88.1},\n                            {x: 290, y: 112, latency: 300, rate: 83.5}\n                          ].map((point, i) => (\n                            <circle key={i} cx={point.x} cy={point.y} r=\"3\" fill=\"#3b82f6\" stroke=\"white\" strokeWidth=\"1\"/>\n                          ))}\n                          \n                          {/* Labels */}\n                          <text x=\"40\" y=\"20\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Fill Rate %</text>\n                          <text x=\"200\" y=\"185\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Latency (μs)</text>\n                        </svg>\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium mb-3\">Latency vs Slippage</h4>\n                      <div className=\"h-48 w-full bg-white rounded border relative overflow-hidden\">\n                        <svg width=\"100%\" height=\"192\" className=\"absolute inset-0\">\n                          {/* Grid */}\n                          {[0, 1, 2, 3, 4, 5].map(i => (\n                            <g key={i}>\n                              <line x1=\"40\" y1={30 + i * 25} x2=\"350\" y2={30 + i * 25} stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                              <text x=\"35\" y={35 + i * 25} fontSize=\"9\" fill=\"#6b7280\" textAnchor=\"end\">\n                                {i * 0.1}\n                              </text>\n                            </g>\n                          ))}\n                          {[0, 1, 2, 3, 4, 5, 6].map(i => (\n                            <g key={i}>\n                              <line x1={40 + i * 50} y1=\"30\" x2={40 + i * 50} y2=\"155\" stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                              <text x={40 + i * 50} y=\"170\" fontSize=\"9\" fill=\"#6b7280\" textAnchor=\"middle\">\n                                {50 + i * 50}μs\n                              </text>\n                            </g>\n                          ))}\n                          \n                          {/* Slippage curve (increasing with latency) */}\n                          <path\n                            d=\"M40,150 Q90,140 140,125 Q190,105 240,80 Q290,50 340,35\"\n                            stroke=\"#ef4444\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                          />\n                          \n                          {/* Data points */}\n                          {[\n                            {x: 40, y: 150, latency: 50, slippage: 0.02},\n                            {x: 90, y: 138, latency: 100, slippage: 0.05},\n                            {x: 140, y: 123, latency: 150, slippage: 0.12},\n                            {x: 190, y: 103, latency: 200, slippage: 0.18},\n                            {x: 240, y: 78, latency: 250, slippage: 0.28},\n                            {x: 290, y: 48, latency: 300, slippage: 0.42}\n                          ].map((point, i) => (\n                            <circle key={i} cx={point.x} cy={point.y} r=\"3\" fill=\"#ef4444\" stroke=\"white\" strokeWidth=\"1\"/>\n                          ))}\n                          \n                          {/* Labels */}\n                          <text x=\"40\" y=\"20\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Slippage (bps)</text>\n                          <text x=\"200\" y=\"185\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Latency (μs)</text>\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Optimization Recommendations */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Optimization Recommendations</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3 p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                      <div>\n                        <div className=\"font-medium text-sm\">Upgrade to premium network</div>\n                        <div className=\"text-xs text-muted-foreground\">Expected 20% latency reduction, +2.1% fill rate improvement</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                      <div>\n                        <div className=\"font-medium text-sm\">Optimize order batching</div>\n                        <div className=\"text-xs text-muted-foreground\">Reduce processing overhead by 15-25 microseconds</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3 p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-yellow-500 rounded-full mt-2\"></div>\n                      <div>\n                        <div className=\"font-medium text-sm\">Review venue selection</div>\n                        <div className=\"text-xs text-muted-foreground\">Consider dark pools for large orders during high volatility</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"calibration\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Historical Calibration */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Model Calibration</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-sm\">Calibration Dataset</Label>\n                      <Select defaultValue=\"last-week\">\n                        <SelectTrigger className=\"mt-1\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"last-week\">Last 7 days</SelectItem>\n                          <SelectItem value=\"last-month\">Last 30 days</SelectItem>\n                          <SelectItem value=\"custom\">Custom range</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Simulation Runs</Label>\n                      <Input \n                        type=\"number\" \n                        value={simulationRuns}\n                        onChange={(e) => setSimulationRuns(parseInt(e.target.value))}\n                        className=\"mt-1\" \n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">Higher runs = better accuracy</p>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"market-regime\" defaultChecked />\n                        <Label htmlFor=\"market-regime\" className=\"text-sm\">Market regime detection</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"intraday-patterns\" defaultChecked />\n                        <Label htmlFor=\"intraday-patterns\" className=\"text-sm\">Intraday patterns</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"volatility-clustering\" />\n                        <Label htmlFor=\"volatility-clustering\" className=\"text-sm\">Volatility clustering</Label>\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full\">Run Calibration</Button>\n                  </CardContent>\n                </Card>\n\n                {/* Calibration Results */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Calibration Results</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Model Fit (R²)</span>\n                        <span className=\"font-mono font-bold\">0.847</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Calibration RMSE</span>\n                        <span className=\"font-mono\">12.3μs</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Kolmogorov-Smirnov</span>\n                        <span className=\"font-mono\">0.032</span>\n                      </div>\n\n                      <div className=\"pt-2 border-t\">\n                        <h4 className=\"font-medium text-sm mb-2\">Parameter Estimates</h4>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Mean (μ)</span>\n                            <span className=\"font-mono\">148.7μs</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Std Dev (σ)</span>\n                            <span className=\"font-mono\">23.1μs</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Skewness</span>\n                            <span className=\"font-mono\">0.42</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Kurtosis</span>\n                            <span className=\"font-mono\">3.18</span>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"pt-2 border-t\">\n                        <h4 className=\"font-medium text-sm mb-2\">Confidence Intervals</h4>\n                        <div className=\"space-y-1 text-xs\">\n                          <div className=\"flex justify-between\">\n                            <span>Mean (95% CI)</span>\n                            <span className=\"font-mono\">[146.2, 151.2]μs</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>P95 (95% CI)</span>\n                            <span className=\"font-mono\">[185.3, 192.7]μs</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":42925},"client/src/components/tabs/MBOReplayTab.tsx":{"content":"import { useState } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Pause, Square, SkipForward, SkipBack, Clock, BarChart3, TrendingUp, Eye } from \"lucide-react\";\n\nexport default function MBOReplayTab() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [replaySpeed, setReplaySpeed] = useState([1]);\n  const [currentTime, setCurrentTime] = useState(\"09:30:00.000\");\n  const [progress, setProgress] = useState(25);\n\n  // Market data simulation\n  const orderBookData = {\n    bids: [\n      { price: 4152.25, size: 45, count: 3 },\n      { price: 4152.00, size: 78, count: 5 },\n      { price: 4151.75, size: 32, count: 2 },\n      { price: 4151.50, size: 156, count: 8 },\n      { price: 4151.25, size: 89, count: 4 },\n      { price: 4151.00, size: 234, count: 12 },\n      { price: 4150.75, size: 67, count: 3 },\n      { price: 4150.50, size: 123, count: 7 },\n      { price: 4150.25, size: 45, count: 2 },\n      { price: 4150.00, size: 178, count: 9 }\n    ],\n    asks: [\n      { price: 4152.50, size: 56, count: 4 },\n      { price: 4152.75, size: 43, count: 2 },\n      { price: 4153.00, size: 89, count: 6 },\n      { price: 4153.25, size: 67, count: 3 },\n      { price: 4153.50, size: 145, count: 8 },\n      { price: 4153.75, size: 78, count: 4 },\n      { price: 4154.00, size: 234, count: 11 },\n      { price: 4154.25, size: 56, count: 3 },\n      { price: 4154.50, size: 98, count: 5 },\n      { price: 4154.75, size: 167, count: 7 }\n    ]\n  };\n\n  // Recent trades data\n  const recentTrades = [\n    { time: \"09:30:15.234\", price: 4152.25, size: 25, side: \"BUY\", aggressor: true },\n    { time: \"09:30:15.156\", price: 4152.00, size: 50, side: \"SELL\", aggressor: false },\n    { time: \"09:30:14.987\", price: 4152.25, size: 15, side: \"BUY\", aggressor: true },\n    { time: \"09:30:14.823\", price: 4152.00, size: 30, side: \"SELL\", aggressor: true },\n    { time: \"09:30:14.675\", price: 4152.25, size: 40, side: \"BUY\", aggressor: false },\n    { time: \"09:30:14.432\", price: 4151.75, size: 20, side: \"SELL\", aggressor: true },\n    { time: \"09:30:14.298\", price: 4152.00, size: 35, side: \"BUY\", aggressor: false },\n    { time: \"09:30:14.156\", price: 4151.75, size: 45, side: \"SELL\", aggressor: true },\n    { time: \"09:30:13.998\", price: 4152.00, size: 25, side: \"BUY\", aggressor: true },\n    { time: \"09:30:13.834\", price: 4151.50, size: 60, side: \"SELL\", aggressor: false }\n  ];\n\n  // Market statistics\n  const marketStats = {\n    totalVolume: 1247863,\n    tradeCount: 2847,\n    vwap: 4151.87,\n    spread: 0.25,\n    bidVolume: 623450,\n    askVolume: 624413,\n    imbalance: -0.08\n  };\n\n  const togglePlayback = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  return (\n    <div className=\"flex flex-1 flex-col\">\n      <div className=\"p-4 border-b border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">Market By Order (MBO) Replay</h3>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">Speed:</span>\n            <div className=\"w-32\">\n              <Slider\n                value={replaySpeed}\n                onValueChange={setReplaySpeed}\n                max={10}\n                min={0.1}\n                step={0.1}\n                className=\"h-6\"\n              />\n            </div>\n            <span className=\"text-sm font-mono w-12\">{replaySpeed[0]}x</span>\n            <Button size=\"sm\" variant=\"outline\">\n              <SkipBack className=\"w-4 h-4\" />\n            </Button>\n            <Button size=\"sm\" onClick={togglePlayback}>\n              {isPlaying ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n            </Button>\n            <Button size=\"sm\" variant=\"outline\">\n              <SkipForward className=\"w-4 h-4\" />\n            </Button>\n            <Button size=\"sm\" variant=\"outline\">\n              <Square className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"mt-3\">\n          <div className=\"flex items-center justify-between text-sm mb-2\">\n            <span className=\"text-muted-foreground\">Replay Progress</span>\n            <span className=\"font-mono\">{currentTime}</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4\">\n          <Tabs defaultValue=\"orderbook\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"orderbook\">Order Book</TabsTrigger>\n              <TabsTrigger value=\"trades\">Trade Feed</TabsTrigger>\n              <TabsTrigger value=\"charts\">Price Charts</TabsTrigger>\n              <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"orderbook\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Order Book Visualization */}\n                <div className=\"lg:col-span-2\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Live Order Book</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        {/* Bids */}\n                        <div>\n                          <h4 className=\"font-medium text-green-600 mb-3 text-center\">BIDS</h4>\n                          <div className=\"space-y-1\">\n                            <div className=\"grid grid-cols-3 text-xs font-medium text-muted-foreground border-b pb-1\">\n                              <span>PRICE</span>\n                              <span className=\"text-right\">SIZE</span>\n                              <span className=\"text-right\">COUNT</span>\n                            </div>\n                            {orderBookData.bids.map((bid, index) => (\n                              <div key={index} className=\"grid grid-cols-3 text-sm py-1 relative\">\n                                {/* Volume bar background */}\n                                <div \n                                  className=\"absolute inset-0 bg-green-500/10 rounded\"\n                                  style={{ width: `${(bid.size / 250) * 100}%` }}\n                                />\n                                <span className=\"font-mono text-green-600 relative z-10\">{bid.price.toFixed(2)}</span>\n                                <span className=\"font-mono text-right relative z-10\">{bid.size}</span>\n                                <span className=\"font-mono text-right relative z-10\">{bid.count}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        {/* Asks */}\n                        <div>\n                          <h4 className=\"font-medium text-red-600 mb-3 text-center\">ASKS</h4>\n                          <div className=\"space-y-1\">\n                            <div className=\"grid grid-cols-3 text-xs font-medium text-muted-foreground border-b pb-1\">\n                              <span>PRICE</span>\n                              <span className=\"text-right\">SIZE</span>\n                              <span className=\"text-right\">COUNT</span>\n                            </div>\n                            {orderBookData.asks.map((ask, index) => (\n                              <div key={index} className=\"grid grid-cols-3 text-sm py-1 relative\">\n                                {/* Volume bar background */}\n                                <div \n                                  className=\"absolute inset-0 bg-red-500/10 rounded\"\n                                  style={{ width: `${(ask.size / 250) * 100}%` }}\n                                />\n                                <span className=\"font-mono text-red-600 relative z-10\">{ask.price.toFixed(2)}</span>\n                                <span className=\"font-mono text-right relative z-10\">{ask.size}</span>\n                                <span className=\"font-mono text-right relative z-10\">{ask.count}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Market Statistics */}\n                <div className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Market Statistics</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Total Volume</span>\n                        <span className=\"font-mono text-sm\">{marketStats.totalVolume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Trade Count</span>\n                        <span className=\"font-mono text-sm\">{marketStats.tradeCount.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">VWAP</span>\n                        <span className=\"font-mono text-sm\">{marketStats.vwap.toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Spread</span>\n                        <span className=\"font-mono text-sm\">{marketStats.spread.toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Bid Volume</span>\n                        <span className=\"font-mono text-sm text-green-600\">{marketStats.bidVolume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Ask Volume</span>\n                        <span className=\"font-mono text-sm text-red-600\">{marketStats.askVolume.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Imbalance</span>\n                        <span className={`font-mono text-sm ${marketStats.imbalance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {marketStats.imbalance >= 0 ? '+' : ''}{(marketStats.imbalance * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Replay Controls</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div>\n                        <Label className=\"text-sm\">Jump to Time</Label>\n                        <Input type=\"time\" defaultValue=\"09:30\" step=\"1\" className=\"mt-1\" />\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Data Source</Label>\n                        <Select defaultValue=\"live\">\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"live\">Live Market Data</SelectItem>\n                            <SelectItem value=\"historical\">Historical Data</SelectItem>\n                            <SelectItem value=\"simulation\">Simulation</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <Button className=\"w-full\" size=\"sm\">\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        Snapshot View\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"trades\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Live Trade Feed</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"grid grid-cols-5 text-xs font-medium text-muted-foreground border-b pb-2\">\n                      <span>TIME</span>\n                      <span className=\"text-right\">PRICE</span>\n                      <span className=\"text-right\">SIZE</span>\n                      <span className=\"text-center\">SIDE</span>\n                      <span className=\"text-center\">AGG</span>\n                    </div>\n                    {recentTrades.map((trade, index) => (\n                      <div key={index} className=\"grid grid-cols-5 text-sm py-1 hover:bg-muted/50 rounded\">\n                        <span className=\"font-mono text-xs\">{trade.time}</span>\n                        <span className={`font-mono text-right ${trade.side === 'BUY' ? 'text-green-600' : 'text-red-600'}`}>\n                          {trade.price.toFixed(2)}\n                        </span>\n                        <span className=\"font-mono text-right\">{trade.size}</span>\n                        <span className={`text-center text-xs font-medium ${trade.side === 'BUY' ? 'text-green-600' : 'text-red-600'}`}>\n                          {trade.side}\n                        </span>\n                        <span className=\"text-center\">\n                          {trade.aggressor && <span className=\"text-orange-500 text-xs\">●</span>}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"charts\" className=\"space-y-4\">\n              {/* Price Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Price Movement</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 w-full bg-muted rounded-lg relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                      {/* Grid lines */}\n                      {[0, 1, 2, 3, 4].map(i => (\n                        <line key={`h-${i}`} x1=\"0\" y1={i * 50} x2=\"100%\" y2={i * 50} stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.3\" />\n                      ))}\n\n                      {/* Price line */}\n                      <path\n                        d={`M 0 150 ${Array.from({ length: 100 }, (_, i) => {\n                          const x = (i / 100) * 800;\n                          const y = 150 + Math.sin(i * 0.1) * 30 + Math.random() * 20 - 10;\n                          return `L ${x} ${y}`;\n                        }).join(' ')}`}\n                        stroke=\"#3b82f6\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                      />\n\n                      {/* Volume bars */}\n                      {Array.from({ length: 20 }, (_, i) => {\n                        const x = (i / 20) * 800;\n                        const height = Math.random() * 40 + 10;\n                        return (\n                          <rect \n                            key={i}\n                            x={x - 5} \n                            y={250 - height} \n                            width=\"10\" \n                            height={height}\n                            fill=\"#10b981\"\n                            opacity=\"0.6\"\n                          />\n                        );\n                      })}\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Volume Profile */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Volume Profile</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-48 w-full bg-muted rounded-lg relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                      {/* Volume profile bars */}\n                      {Array.from({ length: 20 }, (_, i) => {\n                        const y = (i / 20) * 200;\n                        const width = Math.random() * 150 + 50;\n                        return (\n                          <rect \n                            key={i}\n                            x=\"0\" \n                            y={y} \n                            width={width} \n                            height=\"8\"\n                            fill=\"#8b5cf6\"\n                            opacity=\"0.7\"\n                          />\n                        );\n                      })}\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"analytics\" className=\"space-y-4\">\n              {/* Order Flow Intensity Heatmap */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Order Flow Intensity Heatmap</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80 w-full bg-white rounded border relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"320\" className=\"absolute inset-0\">\n                      <defs>\n                        {/* Gradient definitions for different intensities */}\n                        <linearGradient id=\"buyIntensity\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor=\"#dcfce7\" />\n                          <stop offset=\"50%\" stopColor=\"#16a34a\" />\n                          <stop offset=\"100%\" stopColor=\"#15803d\" />\n                        </linearGradient>\n                        <linearGradient id=\"sellIntensity\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor=\"#fef2f2\" />\n                          <stop offset=\"50%\" stopColor=\"#dc2626\" />\n                          <stop offset=\"100%\" stopColor=\"#b91c1c\" />\n                        </linearGradient>\n                      </defs>\n\n                      {/* Time axis labels */}\n                      {Array.from({ length: 12 }, (_, i) => (\n                        <g key={i}>\n                          <line x1={50 + i * 60} y1=\"30\" x2={50 + i * 60} y2=\"280\" stroke=\"#e5e7eb\" strokeWidth=\"1\" />\n                          <text x={50 + i * 60} y=\"300\" fontSize=\"10\" fill=\"#6b7280\" textAnchor=\"middle\">\n                            {`${9 + Math.floor(i / 2)}:${(i % 2) * 30}`}\n                          </text>\n                        </g>\n                      ))}\n\n                      {/* Price level labels */}\n                      {Array.from({ length: 20 }, (_, i) => (\n                        <g key={i}>\n                          <line x1=\"40\" y1={40 + i * 12} x2=\"750\" y2={40 + i * 12} stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                          <text x=\"35\" y={45 + i * 12} fontSize=\"9\" fill=\"#6b7280\" textAnchor=\"end\">\n                            {(4155 - i * 0.25).toFixed(2)}\n                          </text>\n                        </g>\n                      ))}\n\n                      {/* Order flow intensity cells */}\n                      {Array.from({ length: 12 }, (_, timeIndex) => \n                        Array.from({ length: 20 }, (_, priceIndex) => {\n                          const intensity = Math.random();\n                          const isBuy = Math.random() > 0.5;\n                          const cellWidth = 55;\n                          const cellHeight = 11;\n                          const x = 52 + timeIndex * 60;\n                          const y = 40 + priceIndex * 12;\n                          \n                          if (intensity < 0.1) return null; // No activity\n                          \n                          return (\n                            <g key={`${timeIndex}-${priceIndex}`}>\n                              <rect\n                                x={x}\n                                y={y}\n                                width={cellWidth}\n                                height={cellHeight}\n                                fill={isBuy ? \"#22c55e\" : \"#ef4444\"}\n                                opacity={intensity * 0.8}\n                                className=\"hover:stroke-black hover:stroke-1\"\n                              />\n                              {intensity > 0.7 && (\n                                <text\n                                  x={x + cellWidth / 2}\n                                  y={y + cellHeight / 2 + 2}\n                                  fontSize=\"8\"\n                                  fill=\"white\"\n                                  textAnchor=\"middle\"\n                                  fontWeight=\"bold\"\n                                >\n                                  {Math.round(intensity * 100)}\n                                </text>\n                              )}\n                            </g>\n                          );\n                        })\n                      )}\n\n                      {/* Current price line */}\n                      <line x1=\"40\" y1=\"160\" x2=\"750\" y2=\"160\" stroke=\"#3b82f6\" strokeWidth=\"3\" opacity=\"0.8\" />\n                      <text x=\"760\" y=\"165\" fontSize=\"11\" fill=\"#3b82f6\" fontWeight=\"bold\">\n                        Current: $4152.25\n                      </text>\n\n                      {/* Labels */}\n                      <text x=\"50\" y=\"20\" fontSize=\"14\" fill=\"#374151\" fontWeight=\"bold\">Price Levels</text>\n                      <text x=\"400\" y=\"315\" fontSize=\"12\" fill=\"#374151\" fontWeight=\"bold\">Time (Eastern)</text>\n                      \n                      {/* Legend */}\n                      <g transform=\"translate(600, 50)\">\n                        <rect x=\"0\" y=\"0\" width=\"140\" height=\"120\" fill=\"white\" stroke=\"#e5e7eb\" rx=\"4\" fillOpacity=\"0.95\"/>\n                        <text x=\"10\" y=\"15\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Order Flow Intensity</text>\n                        \n                        <rect x=\"10\" y=\"25\" width=\"15\" height=\"8\" fill=\"#22c55e\" opacity=\"0.3\"/>\n                        <text x=\"30\" y=\"32\" fontSize=\"9\" fill=\"#374151\">Low Buy Pressure</text>\n                        \n                        <rect x=\"10\" y=\"40\" width=\"15\" height=\"8\" fill=\"#22c55e\" opacity=\"0.8\"/>\n                        <text x=\"30\" y=\"47\" fontSize=\"9\" fill=\"#374151\">High Buy Pressure</text>\n                        \n                        <rect x=\"10\" y=\"55\" width=\"15\" height=\"8\" fill=\"#ef4444\" opacity=\"0.3\"/>\n                        <text x=\"30\" y=\"62\" fontSize=\"9\" fill=\"#374151\">Low Sell Pressure</text>\n                        \n                        <rect x=\"10\" y=\"70\" width=\"15\" height=\"8\" fill=\"#ef4444\" opacity=\"0.8\"/>\n                        <text x=\"30\" y=\"77\" fontSize=\"9\" fill=\"#374151\">High Sell Pressure</text>\n                        \n                        <line x1=\"10\" y1=\"90\" x2=\"120\" y2=\"90\" stroke=\"#3b82f6\" strokeWidth=\"2\"/>\n                        <text x=\"10\" y=\"105\" fontSize=\"9\" fill=\"#374151\">Current Market Price</text>\n                      </g>\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Market Microstructure Metrics */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Effective Spread</CardTitle>\n                    <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">0.08%</div>\n                    <p className=\"text-xs text-muted-foreground\">Realized cost</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Price Impact</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">0.05%</div>\n                    <p className=\"text-xs text-muted-foreground\">Per $100k</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Tick Frequency</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">247</div>\n                    <p className=\"text-xs text-muted-foreground\">Updates/min</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Book Depth</CardTitle>\n                    <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">8.7M</div>\n                    <p className=\"text-xs text-muted-foreground\">Total liquidity</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Order Flow Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Order Flow Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Order Flow Heatmap */}\n                    <div className=\"h-64 w-full bg-muted rounded-lg relative overflow-hidden\">\n                      <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                        {/* Price levels (Y-axis) */}\n                        {Array.from({ length: 20 }, (_, i) => {\n                          const y = (i / 20) * 256;\n                          const price = 4155 - (i * 0.25);\n                          return (\n                            <g key={`price-${i}`}>\n                              <text x=\"5\" y={y + 10} className=\"text-xs fill-muted-foreground\" textAnchor=\"start\">\n                                {price.toFixed(2)}\n                              </text>\n                              <line x1=\"50\" y1={y} x2=\"100%\" y2={y} stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.2\" />\n                            </g>\n                          );\n                        })}\n\n                        {/* Time intervals (X-axis) */}\n                        {Array.from({ length: 12 }, (_, i) => {\n                          const x = 50 + (i / 12) * (800 - 50);\n                          const time = `09:${30 + i}`;\n                          return (\n                            <g key={`time-${i}`}>\n                              <text x={x} y=\"250\" className=\"text-xs fill-muted-foreground\" textAnchor=\"middle\">\n                                {time}\n                              </text>\n                              <line x1={x} y1=\"0\" x2={x} y2=\"240\" stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.2\" />\n                            </g>\n                          );\n                        })}\n\n                        {/* Order flow intensity heatmap cells */}\n                        {Array.from({ length: 20 }, (_, priceLevel) => \n                          Array.from({ length: 12 }, (_, timeSlot) => {\n                            const x = 50 + (timeSlot / 12) * (800 - 50);\n                            const y = (priceLevel / 20) * 240;\n                            const cellWidth = (800 - 50) / 12;\n                            const cellHeight = 240 / 20;\n                            \n                            // Simulate order flow intensity (higher near mid-price)\n                            const midPrice = 10;\n                            const distanceFromMid = Math.abs(priceLevel - midPrice);\n                            const baseIntensity = Math.max(0, 1 - distanceFromMid / 10);\n                            const randomVariation = Math.random() * 0.5;\n                            const intensity = Math.min(1, baseIntensity + randomVariation);\n                            \n                            // Color based on intensity (red for selling pressure, green for buying pressure)\n                            const isBuyPressure = priceLevel < midPrice;\n                            const opacity = intensity * 0.8;\n                            const color = isBuyPressure ? \"#10b981\" : \"#ef4444\";\n                            \n                            return (\n                              <rect\n                                key={`cell-${priceLevel}-${timeSlot}`}\n                                x={x}\n                                y={y}\n                                width={cellWidth - 1}\n                                height={cellHeight - 1}\n                                fill={color}\n                                opacity={opacity}\n                                className=\"hover:opacity-100 transition-opacity\"\n                              >\n                                <title>\n                                  {`Price: ${(4155 - priceLevel * 0.25).toFixed(2)}, Time: 09:${30 + timeSlot}, Intensity: ${(intensity * 100).toFixed(0)}%`}\n                                </title>\n                              </rect>\n                            );\n                          })\n                        )}\n\n                        {/* Current price line */}\n                        <line \n                          x1=\"50\" \n                          y1=\"120\" \n                          x2=\"100%\" \n                          y2=\"120\" \n                          stroke=\"#3b82f6\" \n                          strokeWidth=\"2\"\n                          strokeDasharray=\"4,4\"\n                        />\n                        <text x=\"55\" y=\"115\" className=\"text-xs fill-blue-500 font-medium\">\n                          Current: 4152.25\n                        </text>\n                      </svg>\n                    </div>\n\n                    {/* Legend and Controls */}\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                          <span className=\"text-sm\">Buy Pressure</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n                          <span className=\"text-sm\">Sell Pressure</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-4 h-4 bg-blue-500 rounded border-2 border-dashed border-blue-500\"></div>\n                          <span className=\"text-sm\">Current Price</span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <span>Intensity Scale:</span>\n                        <div className=\"flex space-x-1\">\n                          {[0.2, 0.4, 0.6, 0.8, 1.0].map((opacity) => (\n                            <div \n                              key={opacity}\n                              className=\"w-4 h-4 bg-blue-500 rounded\" \n                              style={{ opacity }}\n                            ></div>\n                          ))}\n                        </div>\n                        <span>High</span>\n                      </div>\n                    </div>\n\n                    {/* Order Flow Metrics */}\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div className=\"text-center p-3 bg-muted/50 rounded\">\n                        <div className=\"text-lg font-mono font-bold text-green-600\">+2.3M</div>\n                        <div className=\"text-xs text-muted-foreground\">Net Buy Flow</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-muted/50 rounded\">\n                        <div className=\"text-lg font-mono font-bold\">67%</div>\n                        <div className=\"text-xs text-muted-foreground\">Aggressive Buys</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-muted/50 rounded\">\n                        <div className=\"text-lg font-mono font-bold text-orange-600\">0.15</div>\n                        <div className=\"text-xs text-muted-foreground\">Flow Imbalance</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":34407},"client/src/components/tabs/ModelLabTab.tsx":{"content":"import { useState } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Zap, Target, TrendingUp, Settings, Play, Square, Download } from \"lucide-react\";\n\nexport default function ModelLabTab() {\n  const [selectedModel, setSelectedModel] = useState(\"xgboost\");\n  const [trainingProgress, setTrainingProgress] = useState(0);\n  const [isTraining, setIsTraining] = useState(false);\n  const [epochs, setEpochs] = useState([100]);\n  const [learningRate, setLearningRate] = useState([0.01]);\n  const [batchSize, setBatchSize] = useState([256]);\n\n  // Model configurations\n  const models = {\n    xgboost: {\n      name: \"XGBoost Classifier\",\n      type: \"Tree-based\",\n      status: \"ready\",\n      accuracy: 0.847,\n      features: [\"Price Action\", \"Volume\", \"Order Book\", \"Technical Indicators\"],\n      hyperparameters: {\n        n_estimators: 500,\n        max_depth: 6,\n        learning_rate: 0.1,\n        subsample: 0.8\n      }\n    },\n    lstm: {\n      name: \"LSTM Predictor\",\n      type: \"Neural Network\",\n      status: \"training\",\n      accuracy: 0.762,\n      features: [\"Price Sequences\", \"Volume Patterns\", \"Market Microstructure\"],\n      hyperparameters: {\n        hidden_units: 128,\n        layers: 3,\n        dropout: 0.2,\n        sequence_length: 50\n      }\n    },\n    transformer: {\n      name: \"Transformer Model\",\n      type: \"Attention-based\",\n      status: \"ready\",\n      accuracy: 0.891,\n      features: [\"Multi-asset Signals\", \"Cross-venue Data\", \"News Sentiment\"],\n      hyperparameters: {\n        d_model: 512,\n        n_heads: 8,\n        n_layers: 6,\n        attention_dropout: 0.1\n      }\n    }\n  };\n\n  const currentModel = models[selectedModel as keyof typeof models];\n\n  // Training metrics over time\n  const trainingMetrics = [\n    { epoch: 1, train_loss: 0.693, val_loss: 0.698, train_acc: 0.512, val_acc: 0.508 },\n    { epoch: 10, train_loss: 0.542, val_loss: 0.587, train_acc: 0.698, val_acc: 0.672 },\n    { epoch: 20, train_loss: 0.421, val_loss: 0.465, train_acc: 0.762, val_acc: 0.741 },\n    { epoch: 30, train_loss: 0.387, val_loss: 0.412, train_acc: 0.798, val_acc: 0.773 },\n    { epoch: 40, train_loss: 0.356, val_loss: 0.398, train_acc: 0.821, val_acc: 0.791 },\n    { epoch: 50, train_loss: 0.342, val_loss: 0.389, train_acc: 0.834, val_acc: 0.803 }\n  ];\n\n  // Feature importance data\n  const featureImportance = [\n    { feature: \"Bid-Ask Spread\", importance: 0.284 },\n    { feature: \"Volume Imbalance\", importance: 0.192 },\n    { feature: \"Price Momentum\", importance: 0.156 },\n    { feature: \"Order Book Depth\", importance: 0.134 },\n    { feature: \"VWAP Deviation\", importance: 0.098 },\n    { feature: \"Time of Day\", importance: 0.087 },\n    { feature: \"Volatility\", importance: 0.049 }\n  ];\n\n  const startTraining = () => {\n    setIsTraining(true);\n    setTrainingProgress(0);\n    \n    // Simulate training progress\n    const interval = setInterval(() => {\n      setTrainingProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setIsTraining(false);\n          return 100;\n        }\n        return prev + Math.random() * 3;\n      });\n    }, 500);\n  };\n\n  const stopTraining = () => {\n    setIsTraining(false);\n  };\n\n  return (\n    <div className=\"flex flex-1 flex-col\">\n      <div className=\"p-4 border-b border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">Machine Learning Model Lab</h3>\n          <div className=\"flex space-x-2\">\n            <Button size=\"sm\" variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-1\" />\n              Export Model\n            </Button>\n            <Button size=\"sm\" variant=\"outline\">\n              <Settings className=\"w-4 h-4 mr-1\" />\n              Auto-tune\n            </Button>\n            {isTraining ? (\n              <Button size=\"sm\" variant=\"destructive\" onClick={stopTraining}>\n                <Square className=\"w-4 h-4 mr-1\" />\n                Stop Training\n              </Button>\n            ) : (\n              <Button size=\"sm\" onClick={startTraining}>\n                <Play className=\"w-4 h-4 mr-1\" />\n                Start Training\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4\">\n          <Tabs defaultValue=\"models\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"models\">Models</TabsTrigger>\n              <TabsTrigger value=\"training\">Training</TabsTrigger>\n              <TabsTrigger value=\"features\">Features</TabsTrigger>\n              <TabsTrigger value=\"evaluation\">Evaluation</TabsTrigger>\n              <TabsTrigger value=\"deployment\">Deployment</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"models\" className=\"space-y-4\">\n              {/* Model Selection */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                {Object.entries(models).map(([key, model]) => (\n                  <Card \n                    key={key} \n                    className={`cursor-pointer transition-colors ${\n                      selectedModel === key ? 'ring-2 ring-blue-500' : ''\n                    }`}\n                    onClick={() => setSelectedModel(key)}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-base\">{model.name}</CardTitle>\n                        <Badge variant={model.status === 'ready' ? 'default' : model.status === 'training' ? 'secondary' : 'outline'}>\n                          {model.status}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Type:</span>\n                          <span className=\"font-medium\">{model.type}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Accuracy:</span>\n                          <span className=\"font-mono font-bold text-green-600\">\n                            {(model.accuracy * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Features: {model.features.slice(0, 2).join(\", \")}\n                          {model.features.length > 2 && ` +${model.features.length - 2} more`}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Selected Model Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Model Configuration: {currentModel.name}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div>\n                      <h4 className=\"font-medium mb-3\">Hyperparameters</h4>\n                      <div className=\"space-y-2\">\n                        {Object.entries(currentModel.hyperparameters).map(([param, value]) => (\n                          <div key={param} className=\"flex justify-between text-sm\">\n                            <span className=\"capitalize\">{param.replace('_', ' ')}:</span>\n                            <span className=\"font-mono\">{value}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium mb-3\">Input Features</h4>\n                      <div className=\"space-y-1\">\n                        {currentModel.features.map((feature, index) => (\n                          <div key={index} className=\"flex items-center justify-between text-sm\">\n                            <span>{feature}</span>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {Math.floor(Math.random() * 50 + 10)} dims\n                            </Badge>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"training\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Training Configuration */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Training Configuration</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-sm\">Model Architecture</Label>\n                      <Select value={selectedModel} onValueChange={setSelectedModel}>\n                        <SelectTrigger className=\"mt-1\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"xgboost\">XGBoost Classifier</SelectItem>\n                          <SelectItem value=\"lstm\">LSTM Predictor</SelectItem>\n                          <SelectItem value=\"transformer\">Transformer Model</SelectItem>\n                          <SelectItem value=\"random-forest\">Random Forest</SelectItem>\n                          <SelectItem value=\"svm\">Support Vector Machine</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Epochs: {epochs[0]}</Label>\n                      <Slider\n                        value={epochs}\n                        onValueChange={setEpochs}\n                        max={1000}\n                        min={10}\n                        step={10}\n                        className=\"mt-2\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Learning Rate: {learningRate[0]}</Label>\n                      <Slider\n                        value={learningRate}\n                        onValueChange={setLearningRate}\n                        max={0.1}\n                        min={0.001}\n                        step={0.001}\n                        className=\"mt-2\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Batch Size: {batchSize[0]}</Label>\n                      <Slider\n                        value={batchSize}\n                        onValueChange={setBatchSize}\n                        max={1024}\n                        min={32}\n                        step={32}\n                        className=\"mt-2\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"early-stopping\" defaultChecked />\n                        <Label htmlFor=\"early-stopping\" className=\"text-sm\">Early stopping</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"data-augmentation\" />\n                        <Label htmlFor=\"data-augmentation\" className=\"text-sm\">Data augmentation</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"cross-validation\" defaultChecked />\n                        <Label htmlFor=\"cross-validation\" className=\"text-sm\">Cross validation</Label>\n                      </div>\n                    </div>\n\n                    {isTraining && (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Training Progress</span>\n                          <span>{trainingProgress.toFixed(1)}%</span>\n                        </div>\n                        <Progress value={trainingProgress} />\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Training Metrics */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Training Metrics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64 w-full bg-muted rounded-lg relative overflow-hidden\">\n                      <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                        {/* Grid lines */}\n                        {[0, 1, 2, 3, 4].map(i => (\n                          <line key={`h-${i}`} x1=\"0\" y1={i * 50} x2=\"100%\" y2={i * 50} stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.3\" />\n                        ))}\n\n                        {/* Training accuracy curve */}\n                        <path\n                          d={`M 0 ${200 - trainingMetrics[0].train_acc * 200} ${trainingMetrics.map((metric, i) => \n                            `L ${(i / trainingMetrics.length) * 400} ${200 - metric.train_acc * 200}`\n                          ).join(' ')}`}\n                          stroke=\"#10b981\"\n                          strokeWidth=\"2\"\n                          fill=\"none\"\n                        />\n\n                        {/* Validation accuracy curve */}\n                        <path\n                          d={`M 0 ${200 - trainingMetrics[0].val_acc * 200} ${trainingMetrics.map((metric, i) => \n                            `L ${(i / trainingMetrics.length) * 400} ${200 - metric.val_acc * 200}`\n                          ).join(' ')}`}\n                          stroke=\"#3b82f6\"\n                          strokeWidth=\"2\"\n                          strokeDasharray=\"4,4\"\n                          fill=\"none\"\n                        />\n\n                        {/* Legend */}\n                        <text x=\"10\" y=\"20\" className=\"text-xs fill-current\">Accuracy</text>\n                        <line x1=\"60\" y1=\"15\" x2=\"80\" y2=\"15\" stroke=\"#10b981\" strokeWidth=\"2\" />\n                        <text x=\"85\" y=\"20\" className=\"text-xs fill-current\">Train</text>\n                        <line x1=\"120\" y1=\"15\" x2=\"140\" y2=\"15\" stroke=\"#3b82f6\" strokeWidth=\"2\" strokeDasharray=\"4,4\" />\n                        <text x=\"145\" y=\"20\" className=\"text-xs fill-current\">Validation</text>\n                      </svg>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 mt-4 text-sm\">\n                      <div>\n                        <div className=\"font-medium\">Current Epoch</div>\n                        <div className=\"font-mono text-lg\">{isTraining ? Math.floor(trainingProgress / 2) : 50}</div>\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">Best Validation</div>\n                        <div className=\"font-mono text-lg text-green-600\">80.3%</div>\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">Training Loss</div>\n                        <div className=\"font-mono\">0.342</div>\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">Validation Loss</div>\n                        <div className=\"font-mono\">0.389</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"features\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Feature Importance */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Feature Importance</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {featureImportance.map((item, index) => (\n                        <div key={index} className=\"space-y-1\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"font-medium\">{item.feature}</span>\n                            <span className=\"font-mono\">{(item.importance * 100).toFixed(1)}%</span>\n                          </div>\n                          <Progress value={item.importance * 100} className=\"h-2\" />\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Feature Engineering */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Feature Engineering</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-sm\">Feature Selection Method</Label>\n                      <Select defaultValue=\"recursive\">\n                        <SelectTrigger className=\"mt-1\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"recursive\">Recursive Feature Elimination</SelectItem>\n                          <SelectItem value=\"univariate\">Univariate Selection</SelectItem>\n                          <SelectItem value=\"lasso\">LASSO Regularization</SelectItem>\n                          <SelectItem value=\"mutual-info\">Mutual Information</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"technical-indicators\" defaultChecked />\n                        <Label htmlFor=\"technical-indicators\" className=\"text-sm\">Technical indicators</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"order-book-features\" defaultChecked />\n                        <Label htmlFor=\"order-book-features\" className=\"text-sm\">Order book features</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"volume-profile\" defaultChecked />\n                        <Label htmlFor=\"volume-profile\" className=\"text-sm\">Volume profile</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"market-microstructure\" />\n                        <Label htmlFor=\"market-microstructure\" className=\"text-sm\">Market microstructure</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"sentiment-data\" />\n                        <Label htmlFor=\"sentiment-data\" className=\"text-sm\">Sentiment data</Label>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <Label className=\"text-sm\">Lookback Window</Label>\n                        <Input type=\"number\" defaultValue=\"50\" className=\"mt-1\" />\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Prediction Horizon</Label>\n                        <Input type=\"number\" defaultValue=\"5\" className=\"mt-1\" />\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full\" variant=\"outline\">\n                      Regenerate Features\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Feature Correlation Matrix */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Feature Correlation Matrix</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 w-full bg-white rounded border relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"256\" className=\"absolute inset-0\">\n                      <defs>\n                        <linearGradient id=\"correlationGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor=\"#dc2626\" />\n                          <stop offset=\"50%\" stopColor=\"#ffffff\" />\n                          <stop offset=\"100%\" stopColor=\"#16a34a\" />\n                        </linearGradient>\n                      </defs>\n\n                      {/* Feature labels */}\n                      {[\"Price\", \"Volume\", \"RSI\", \"MACD\", \"BB\", \"Sentiment\"].map((feature, i) => (\n                        <g key={i}>\n                          <text x=\"35\" y={45 + i * 35} fontSize=\"11\" fill=\"#374151\" textAnchor=\"end\">{feature}</text>\n                          <text x={55 + i * 35} y=\"25\" fontSize=\"11\" fill=\"#374151\" textAnchor=\"middle\" transform={`rotate(-45, ${55 + i * 35}, 25)`}>{feature}</text>\n                        </g>\n                      ))}\n\n                      {/* Correlation matrix cells */}\n                      {Array.from({ length: 6 }, (_, i) => \n                        Array.from({ length: 6 }, (_, j) => {\n                          const correlation = i === j ? 1 : (Math.random() - 0.5) * 2;\n                          const intensity = Math.abs(correlation);\n                          const color = correlation > 0 ? `rgba(34, 197, 94, ${intensity})` : `rgba(220, 38, 38, ${intensity})`;\n                          \n                          return (\n                            <g key={`${i}-${j}`}>\n                              <rect\n                                x={45 + j * 35}\n                                y={35 + i * 35}\n                                width=\"30\"\n                                height=\"30\"\n                                fill={color}\n                                stroke=\"#e5e7eb\"\n                                strokeWidth=\"1\"\n                              />\n                              <text\n                                x={60 + j * 35}\n                                y={53 + i * 35}\n                                fontSize=\"9\"\n                                fill={intensity > 0.5 ? \"white\" : \"black\"}\n                                textAnchor=\"middle\"\n                                fontWeight=\"bold\"\n                              >\n                                {correlation.toFixed(2)}\n                              </text>\n                            </g>\n                          );\n                        })\n                      )}\n\n                      {/* Legend */}\n                      <g transform=\"translate(280, 50)\">\n                        <rect x=\"0\" y=\"0\" width=\"120\" height=\"80\" fill=\"white\" stroke=\"#e5e7eb\" rx=\"4\" fillOpacity=\"0.95\"/>\n                        <text x=\"10\" y=\"15\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Correlation</text>\n                        \n                        <rect x=\"10\" y=\"25\" width=\"15\" height=\"8\" fill=\"rgba(220, 38, 38, 0.8)\"/>\n                        <text x=\"30\" y=\"32\" fontSize=\"9\" fill=\"#374151\">Strong Negative</text>\n                        \n                        <rect x=\"10\" y=\"40\" width=\"15\" height=\"8\" fill=\"rgba(255, 255, 255, 0.8)\" stroke=\"#e5e7eb\"/>\n                        <text x=\"30\" y=\"47\" fontSize=\"9\" fill=\"#374151\">No Correlation</text>\n                        \n                        <rect x=\"10\" y=\"55\" width=\"15\" height=\"8\" fill=\"rgba(34, 197, 94, 0.8)\"/>\n                        <text x=\"30\" y=\"62\" fontSize=\"9\" fill=\"#374151\">Strong Positive</text>\n                        \n                        <text x=\"10\" y=\"75\" fontSize=\"8\" fill=\"#6b7280\">Range: -1.0 to +1.0</text>\n                      </g>\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"evaluation\" className=\"space-y-4\">\n              {/* Model Performance Metrics */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Accuracy</CardTitle>\n                    <Target className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">84.7%</div>\n                    <p className=\"text-xs text-muted-foreground\">Test set performance</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Precision</CardTitle>\n                    <Zap className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">82.1%</div>\n                    <p className=\"text-xs text-muted-foreground\">True positive rate</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Recall</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">79.6%</div>\n                    <p className=\"text-xs text-muted-foreground\">Sensitivity</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">F1-Score</CardTitle>\n                    <Brain className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">80.8%</div>\n                    <p className=\"text-xs text-muted-foreground\">Harmonic mean</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Confusion Matrix & ROC Curve */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Confusion Matrix</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-48 w-full bg-white rounded border relative overflow-hidden\">\n                      <svg width=\"100%\" height=\"192\" className=\"absolute inset-0\">\n                        {/* Confusion Matrix Grid */}\n                        <g transform=\"translate(80, 40)\">\n                          {/* Matrix cells */}\n                          <rect x=\"0\" y=\"0\" width=\"60\" height=\"60\" fill=\"#22c55e\" fillOpacity=\"0.8\" stroke=\"white\" strokeWidth=\"2\"/>\n                          <text x=\"30\" y=\"35\" fontSize=\"16\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">847</text>\n                          <text x=\"30\" y=\"50\" fontSize=\"10\" fill=\"white\" textAnchor=\"middle\">True Pos</text>\n                          \n                          <rect x=\"60\" y=\"0\" width=\"60\" height=\"60\" fill=\"#ef4444\" fillOpacity=\"0.6\" stroke=\"white\" strokeWidth=\"2\"/>\n                          <text x=\"90\" y=\"35\" fontSize=\"16\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">153</text>\n                          <text x=\"90\" y=\"50\" fontSize=\"10\" fill=\"white\" textAnchor=\"middle\">False Neg</text>\n                          \n                          <rect x=\"0\" y=\"60\" width=\"60\" height=\"60\" fill=\"#ef4444\" fillOpacity=\"0.4\" stroke=\"white\" strokeWidth=\"2\"/>\n                          <text x=\"30\" y=\"95\" fontSize=\"16\" fill=\"black\" textAnchor=\"middle\" fontWeight=\"bold\">89</text>\n                          <text x=\"30\" y=\"110\" fontSize=\"10\" fill=\"black\" textAnchor=\"middle\">False Pos</text>\n                          \n                          <rect x=\"60\" y=\"60\" width=\"60\" height=\"60\" fill=\"#22c55e\" fillOpacity=\"0.6\" stroke=\"white\" strokeWidth=\"2\"/>\n                          <text x=\"90\" y=\"95\" fontSize=\"16\" fill=\"white\" textAnchor=\"middle\" fontWeight=\"bold\">911</text>\n                          <text x=\"90\" y=\"110\" fontSize=\"10\" fill=\"white\" textAnchor=\"middle\">True Neg</text>\n                        </g>\n                        \n                        {/* Labels */}\n                        <text x=\"20\" y=\"80\" fontSize=\"12\" fill=\"#374151\" fontWeight=\"bold\" textAnchor=\"middle\" transform=\"rotate(-90, 20, 80)\">Actual</text>\n                        <text x=\"140\" y=\"30\" fontSize=\"12\" fill=\"#374151\" fontWeight=\"bold\" textAnchor=\"middle\">Predicted</text>\n                        \n                        <text x=\"50\" y=\"30\" fontSize=\"10\" fill=\"#6b7280\" textAnchor=\"middle\">Positive</text>\n                        <text x=\"110\" y=\"30\" fontSize=\"10\" fill=\"#6b7280\" textAnchor=\"middle\">Negative</text>\n                        <text x=\"20\" y=\"75\" fontSize=\"10\" fill=\"#6b7280\" textAnchor=\"middle\" transform=\"rotate(-90, 20, 75)\">Pos</text>\n                        <text x=\"20\" y=\"135\" fontSize=\"10\" fill=\"#6b7280\" textAnchor=\"middle\" transform=\"rotate(-90, 20, 135)\">Neg</text>\n                        \n                        {/* Accuracy metrics */}\n                        <text x=\"250\" y=\"60\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">Accuracy: 87.9%</text>\n                        <text x=\"250\" y=\"80\" fontSize=\"10\" fill=\"#6b7280\">Precision: 82.1%</text>\n                        <text x=\"250\" y=\"95\" fontSize=\"10\" fill=\"#6b7280\">Recall: 79.6%</text>\n                        <text x=\"250\" y=\"110\" fontSize=\"10\" fill=\"#6b7280\">F1-Score: 80.8%</text>\n                        <text x=\"250\" y=\"125\" fontSize=\"10\" fill=\"#6b7280\">Total: 2000 samples</text>\n                      </svg>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>ROC Curve</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-48 w-full bg-white rounded border relative overflow-hidden\">\n                      <svg width=\"100%\" height=\"192\" className=\"absolute inset-0\">\n                        {/* Grid */}\n                        {[0, 1, 2, 3, 4, 5].map(i => (\n                          <g key={i}>\n                            <line x1=\"40\" y1={30 + i * 25} x2=\"280\" y2={30 + i * 25} stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                            <text x=\"35\" y={35 + i * 25} fontSize=\"9\" fill=\"#6b7280\" textAnchor=\"end\">\n                              {(1 - i * 0.2).toFixed(1)}\n                            </text>\n                          </g>\n                        ))}\n                        {[0, 1, 2, 3, 4, 5].map(i => (\n                          <g key={i}>\n                            <line x1={40 + i * 48} y1=\"30\" x2={40 + i * 48} y2=\"155\" stroke=\"#e5e7eb\" strokeWidth=\"0.5\" />\n                            <text x={40 + i * 48} y=\"170\" fontSize=\"9\" fill=\"#6b7280\" textAnchor=\"middle\">\n                              {(i * 0.2).toFixed(1)}\n                            </text>\n                          </g>\n                        ))}\n                        \n                        {/* Diagonal reference line (random classifier) */}\n                        <line x1=\"40\" y1=\"155\" x2=\"280\" y2=\"30\" stroke=\"#9ca3af\" strokeWidth=\"1\" strokeDasharray=\"4,4\" />\n                        \n                        {/* ROC Curve */}\n                        <path\n                          d=\"M40,155 Q80,140 120,110 Q160,70 200,50 Q240,35 280,30\"\n                          stroke=\"#3b82f6\"\n                          strokeWidth=\"3\"\n                          fill=\"none\"\n                        />\n                        \n                        {/* Area under curve (light blue fill) */}\n                        <path\n                          d=\"M40,155 Q80,140 120,110 Q160,70 200,50 Q240,35 280,30 L280,155 L40,155 Z\"\n                          fill=\"#3b82f6\"\n                          fillOpacity=\"0.1\"\n                        />\n                        \n                        {/* Key points on curve */}\n                        {[\n                          {x: 40, y: 155, tpr: 0.0, fpr: 0.0},\n                          {x: 88, y: 125, tpr: 0.3, fpr: 0.1},\n                          {x: 136, y: 85, tpr: 0.7, fpr: 0.2},\n                          {x: 184, y: 55, tpr: 0.85, fpr: 0.3},\n                          {x: 232, y: 40, tpr: 0.95, fpr: 0.4},\n                          {x: 280, y: 30, tpr: 1.0, fpr: 1.0}\n                        ].map((point, i) => (\n                          <circle key={i} cx={point.x} cy={point.y} r=\"3\" fill=\"#3b82f6\" stroke=\"white\" strokeWidth=\"1\"/>\n                        ))}\n                        \n                        {/* Labels */}\n                        <text x=\"40\" y=\"20\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">True Positive Rate</text>\n                        <text x=\"160\" y=\"185\" fontSize=\"11\" fill=\"#374151\" fontWeight=\"bold\">False Positive Rate</text>\n                        \n                        {/* AUC display */}\n                        <g transform=\"translate(200, 120)\">\n                          <rect x=\"0\" y=\"0\" width=\"70\" height=\"30\" fill=\"white\" stroke=\"#e5e7eb\" rx=\"4\" fillOpacity=\"0.95\"/>\n                          <text x=\"35\" y=\"12\" fontSize=\"10\" fill=\"#374151\" fontWeight=\"bold\" textAnchor=\"middle\">AUC</text>\n                          <text x=\"35\" y=\"24\" fontSize=\"12\" fill=\"#3b82f6\" fontWeight=\"bold\" textAnchor=\"middle\">0.876</text>\n                        </g>\n                        \n                        {/* Perfect classifier reference */}\n                        <text x=\"50\" y=\"45\" fontSize=\"8\" fill=\"#6b7280\">Perfect (AUC=1.0)</text>\n                        <text x=\"200\" y=\"140\" fontSize=\"8\" fill=\"#6b7280\">Random (AUC=0.5)</text>\n                      </svg>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Model Comparison */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Model Comparison</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {Object.entries(models).map(([key, model]) => (\n                      <div key={key} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge variant={model.status === 'ready' ? 'default' : 'secondary'}>\n                            {model.status}\n                          </Badge>\n                          <span className=\"font-medium\">{model.name}</span>\n                          <span className=\"text-sm text-muted-foreground\">{model.type}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-4 text-sm\">\n                          <span>Accuracy: <span className=\"font-mono font-bold\">{(model.accuracy * 100).toFixed(1)}%</span></span>\n                          <Button size=\"sm\" variant=\"outline\">Deploy</Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"deployment\" className=\"space-y-4\">\n              {/* Deployment Configuration */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Deployment Settings</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-sm\">Deployment Target</Label>\n                      <Select defaultValue=\"production\">\n                        <SelectTrigger className=\"mt-1\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"production\">Production Environment</SelectItem>\n                          <SelectItem value=\"staging\">Staging Environment</SelectItem>\n                          <SelectItem value=\"local\">Local Testing</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-sm\">Model Version</Label>\n                      <Input defaultValue=\"v1.2.0\" className=\"mt-1\" />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <Label className=\"text-sm\">CPU Cores</Label>\n                        <Input type=\"number\" defaultValue=\"4\" className=\"mt-1\" />\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Memory (GB)</Label>\n                        <Input type=\"number\" defaultValue=\"8\" className=\"mt-1\" />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"auto-scaling\" defaultChecked />\n                        <Label htmlFor=\"auto-scaling\" className=\"text-sm\">Auto-scaling</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"health-checks\" defaultChecked />\n                        <Label htmlFor=\"health-checks\" className=\"text-sm\">Health checks</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"monitoring\" defaultChecked />\n                        <Label htmlFor=\"monitoring\" className=\"text-sm\">Performance monitoring</Label>\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full\">Deploy Model</Button>\n                  </CardContent>\n                </Card>\n\n                {/* Model Monitoring */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Model Monitoring</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm font-medium\">Model Status</span>\n                        <Badge variant=\"default\">Active</Badge>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Prediction Latency</span>\n                          <span className=\"font-mono\">2.3ms</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Throughput</span>\n                          <span className=\"font-mono\">1,247 pred/sec</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Memory Usage</span>\n                          <span className=\"font-mono\">6.2 GB</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>CPU Usage</span>\n                          <span className=\"font-mono\">73%</span>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Model Drift Score</span>\n                          <span className=\"font-mono text-green-600\">0.023</span>\n                        </div>\n                        <Progress value={2.3} />\n                        <p className=\"text-xs text-muted-foreground\">Low drift detected</p>\n                      </div>\n\n                      <div className=\"pt-2 border-t\">\n                        <h4 className=\"font-medium text-sm mb-2\">Recent Deployments</h4>\n                        <div className=\"space-y-1 text-xs\">\n                          <div className=\"flex justify-between\">\n                            <span>v1.2.0</span>\n                            <span className=\"text-muted-foreground\">2h ago</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>v1.1.5</span>\n                            <span className=\"text-muted-foreground\">1d ago</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>v1.1.4</span>\n                            <span className=\"text-muted-foreground\">3d ago</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":42535},"client/src/components/tabs/QueueTab.tsx":{"content":"import { useState } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Users, Clock, TrendingUp, AlertCircle, CheckCircle, XCircle, Target } from \"lucide-react\";\n\nexport default function QueueTab() {\n  const [selectedOrder, setSelectedOrder] = useState(\"order-001\");\n\n  // Queue position data\n  const queueData = [\n    { \n      orderId: \"order-001\", \n      side: \"BUY\", \n      price: 4152.25, \n      originalSize: 100, \n      remainingSize: 75,\n      queuePosition: 3,\n      totalAhead: 145,\n      estimatedFillTime: \"2.3s\",\n      status: \"PENDING\",\n      submittedAt: \"09:30:15.234\"\n    },\n    { \n      orderId: \"order-002\", \n      side: \"SELL\", \n      price: 4153.00, \n      originalSize: 50, \n      remainingSize: 0,\n      queuePosition: 0,\n      totalAhead: 0,\n      estimatedFillTime: \"FILLED\",\n      status: \"FILLED\",\n      submittedAt: \"09:30:12.156\"\n    },\n    { \n      orderId: \"order-003\", \n      side: \"BUY\", \n      price: 4151.75, \n      originalSize: 200, \n      remainingSize: 150,\n      queuePosition: 8,\n      totalAhead: 567,\n      estimatedFillTime: \"12.7s\",\n      status: \"PENDING\",\n      submittedAt: \"09:30:08.987\"\n    },\n    { \n      orderId: \"order-004\", \n      side: \"SELL\", \n      price: 4154.50, \n      originalSize: 75, \n      remainingSize: 75,\n      queuePosition: 15,\n      totalAhead: 234,\n      estimatedFillTime: \"45.2s\",\n      status: \"PENDING\",\n      submittedAt: \"09:29:58.432\"\n    },\n    { \n      orderId: \"order-005\", \n      side: \"BUY\", \n      price: 4150.00, \n      originalSize: 300, \n      remainingSize: 0,\n      queuePosition: 0,\n      totalAhead: 0,\n      estimatedFillTime: \"CANCELLED\",\n      status: \"CANCELLED\",\n      submittedAt: \"09:29:45.678\"\n    }\n  ];\n\n  // Queue statistics\n  const queueStats = {\n    totalOrders: 42,\n    pendingOrders: 28,\n    filledOrders: 12,\n    cancelledOrders: 2,\n    averageQueueTime: 8.4,\n    fillRate: 85.7,\n    averageSlippage: 0.025\n  };\n\n  // Queue position visualization data\n  const generateQueueVisualization = (order: any) => {\n    const positions = [];\n    for (let i = 0; i <= order.queuePosition + 5; i++) {\n      positions.push({\n        position: i,\n        size: Math.floor(Math.random() * 100) + 20,\n        isOurOrder: i === order.queuePosition,\n        isFilled: i < Math.max(0, order.queuePosition - 2)\n      });\n    }\n    return positions;\n  };\n\n  const selectedOrderData = queueData.find(order => order.orderId === selectedOrder);\n  const queueVisualization = selectedOrderData ? generateQueueVisualization(selectedOrderData) : [];\n\n  return (\n    <div className=\"flex flex-1 flex-col\">\n      <div className=\"p-4 border-b border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">Queue Position Tracking</h3>\n          <div className=\"flex space-x-2\">\n            <Button size=\"sm\" variant=\"outline\">Export Queue Data</Button>\n            <Button size=\"sm\" variant=\"outline\">Queue Analytics</Button>\n            <Button size=\"sm\">Optimize Orders</Button>\n          </div>\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4\">\n          <Tabs defaultValue=\"positions\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"positions\">Queue Positions</TabsTrigger>\n              <TabsTrigger value=\"visualization\">Queue Visualization</TabsTrigger>\n              <TabsTrigger value=\"analytics\">Fill Analytics</TabsTrigger>\n              <TabsTrigger value=\"optimization\">Optimization</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"positions\" className=\"space-y-4\">\n              {/* Queue Statistics Cards */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{queueStats.totalOrders}</div>\n                    <p className=\"text-xs text-muted-foreground\">Active session</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Fill Rate</CardTitle>\n                    <Target className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">{queueStats.fillRate}%</div>\n                    <p className=\"text-xs text-muted-foreground\">vs target 90%</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Avg Queue Time</CardTitle>\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{queueStats.averageQueueTime}s</div>\n                    <p className=\"text-xs text-muted-foreground\">Until fill</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Avg Slippage</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{queueStats.averageSlippage}%</div>\n                    <p className=\"text-xs text-muted-foreground\">From expected</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Active Orders Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Active Orders & Queue Positions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"grid grid-cols-8 text-xs font-medium text-muted-foreground border-b pb-2\">\n                      <span>ORDER ID</span>\n                      <span>SIDE</span>\n                      <span className=\"text-right\">PRICE</span>\n                      <span className=\"text-right\">SIZE</span>\n                      <span className=\"text-center\">QUEUE POS</span>\n                      <span className=\"text-right\">AHEAD</span>\n                      <span className=\"text-center\">EST. FILL</span>\n                      <span className=\"text-center\">STATUS</span>\n                    </div>\n                    {queueData.map((order) => (\n                      <div \n                        key={order.orderId} \n                        className={`grid grid-cols-8 text-sm py-2 hover:bg-muted/50 rounded cursor-pointer ${\n                          selectedOrder === order.orderId ? 'bg-accent' : ''\n                        }`}\n                        onClick={() => setSelectedOrder(order.orderId)}\n                      >\n                        <span className=\"font-mono text-xs\">{order.orderId}</span>\n                        <span className={`font-medium ${order.side === 'BUY' ? 'text-green-600' : 'text-red-600'}`}>\n                          {order.side}\n                        </span>\n                        <span className=\"font-mono text-right\">{order.price.toFixed(2)}</span>\n                        <span className=\"font-mono text-right\">\n                          {order.remainingSize}/{order.originalSize}\n                        </span>\n                        <span className=\"font-mono text-center\">\n                          {order.status === 'PENDING' ? `#${order.queuePosition}` : '-'}\n                        </span>\n                        <span className=\"font-mono text-right\">\n                          {order.status === 'PENDING' ? order.totalAhead.toLocaleString() : '-'}\n                        </span>\n                        <span className=\"font-mono text-center text-xs\">\n                          {order.estimatedFillTime}\n                        </span>\n                        <div className=\"flex justify-center\">\n                          <Badge \n                            variant={\n                              order.status === 'FILLED' ? 'default' : \n                              order.status === 'PENDING' ? 'secondary' : \n                              'destructive'\n                            }\n                            className=\"text-xs\"\n                          >\n                            {order.status === 'FILLED' && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                            {order.status === 'PENDING' && <Clock className=\"w-3 h-3 mr-1\" />}\n                            {order.status === 'CANCELLED' && <XCircle className=\"w-3 h-3 mr-1\" />}\n                            {order.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"visualization\" className=\"space-y-4\">\n              {/* Order Selection */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Queue Position Visualization</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-4\">\n                    <Select value={selectedOrder} onValueChange={setSelectedOrder}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {queueData.filter(order => order.status === 'PENDING').map((order) => (\n                          <SelectItem key={order.orderId} value={order.orderId}>\n                            {order.orderId} - {order.side} {order.price.toFixed(2)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {selectedOrderData && selectedOrderData.status === 'PENDING' && (\n                    <div className=\"space-y-4\">\n                      {/* Queue Position Progress */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Queue Progress</span>\n                          <span className=\"font-mono\">\n                            Position #{selectedOrderData.queuePosition} of {selectedOrderData.queuePosition + selectedOrderData.totalAhead}\n                          </span>\n                        </div>\n                        <Progress \n                          value={((selectedOrderData.totalAhead - selectedOrderData.queuePosition) / selectedOrderData.totalAhead) * 100} \n                          className=\"h-3\"\n                        />\n                      </div>\n\n                      {/* Visual Queue Representation */}\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium text-sm\">Order Queue Visualization</h4>\n                        <div className=\"flex space-x-1 overflow-x-auto pb-2\">\n                          {queueVisualization.map((item) => (\n                            <div key={item.position} className=\"flex flex-col items-center min-w-0\">\n                              <div \n                                className={`w-8 h-12 rounded border-2 flex items-center justify-center text-xs font-mono ${\n                                  item.isOurOrder \n                                    ? 'bg-blue-500 border-blue-600 text-white' \n                                    : item.isFilled \n                                      ? 'bg-green-100 border-green-300 text-green-700' \n                                      : 'bg-gray-100 border-gray-300 text-gray-600'\n                                }`}\n                              >\n                                {item.size}\n                              </div>\n                              <span className=\"text-xs mt-1\">\n                                {item.isOurOrder ? 'YOU' : `#${item.position}`}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Each block represents an order in the queue. Your order is highlighted in blue.\n                        </p>\n                      </div>\n\n                      {/* Order Details */}\n                      <div className=\"grid grid-cols-2 gap-4 pt-4 border-t\">\n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-medium text-sm\">Order Details</h4>\n                          <div className=\"space-y-1 text-sm\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Submitted:</span>\n                              <span className=\"font-mono\">{selectedOrderData.submittedAt}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Original Size:</span>\n                              <span className=\"font-mono\">{selectedOrderData.originalSize}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Remaining:</span>\n                              <span className=\"font-mono\">{selectedOrderData.remainingSize}</span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-medium text-sm\">Queue Status</h4>\n                          <div className=\"space-y-1 text-sm\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Position:</span>\n                              <span className=\"font-mono\">#{selectedOrderData.queuePosition}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Total Ahead:</span>\n                              <span className=\"font-mono\">{selectedOrderData.totalAhead}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Est. Fill:</span>\n                              <span className=\"font-mono\">{selectedOrderData.estimatedFillTime}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {selectedOrderData && selectedOrderData.status !== 'PENDING' && (\n                    <div className=\"flex items-center justify-center h-32 text-muted-foreground\">\n                      <div className=\"text-center\">\n                        <AlertCircle className=\"w-8 h-8 mx-auto mb-2\" />\n                        <p>Selected order is not in queue</p>\n                        <p className=\"text-sm\">Status: {selectedOrderData.status}</p>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"analytics\" className=\"space-y-4\">\n              {/* Fill Rate Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Fill Rate Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-48 w-full bg-muted rounded-lg relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                      {/* Grid lines */}\n                      {[0, 1, 2, 3].map(i => (\n                        <line key={`h-${i}`} x1=\"0\" y1={i * 48} x2=\"100%\" y2={i * 48} stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.3\" />\n                      ))}\n\n                      {/* Fill rate over time */}\n                      <path\n                        d={`M 0 100 ${Array.from({ length: 50 }, (_, i) => {\n                          const x = (i / 50) * 800;\n                          const y = 100 - (Math.random() * 20 + 70); // 70-90% fill rate\n                          return `L ${x} ${y}`;\n                        }).join(' ')}`}\n                        stroke=\"#10b981\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                      />\n\n                      {/* Target line */}\n                      <line x1=\"0\" y1=\"48\" x2=\"100%\" y2=\"48\" stroke=\"#ef4444\" strokeWidth=\"1\" strokeDasharray=\"4,4\" />\n                      <text x=\"10\" y=\"45\" className=\"text-xs fill-red-600\">Target 90%</text>\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Queue Performance Metrics */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Queue Time Distribution</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {[\n                        { range: \"0-5s\", count: 18, percentage: 45 },\n                        { range: \"5-15s\", count: 12, percentage: 30 },\n                        { range: \"15-30s\", count: 6, percentage: 15 },\n                        { range: \"30s+\", count: 4, percentage: 10 }\n                      ].map((item) => (\n                        <div key={item.range} className=\"space-y-1\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"font-medium\">{item.range}</span>\n                            <span className=\"font-mono\">{item.count} orders ({item.percentage}%)</span>\n                          </div>\n                          <Progress value={item.percentage} className=\"h-2\" />\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Fill Quality Metrics</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Immediate Fills</span>\n                      <span className=\"font-mono text-sm\">23%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Partial Fills</span>\n                      <span className=\"font-mono text-sm\">31%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Queue Jumps</span>\n                      <span className=\"font-mono text-sm\">8%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Price Improvements</span>\n                      <span className=\"font-mono text-sm text-green-600\">12%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Average Slippage</span>\n                      <span className=\"font-mono text-sm\">0.025%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Timeout Rate</span>\n                      <span className=\"font-mono text-sm text-red-600\">4.8%</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"optimization\" className=\"space-y-4\">\n              {/* Queue Optimization Recommendations */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Queue Optimization Recommendations</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start space-x-3 p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium text-sm\">Optimal Price Level Strategy</div>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          Place orders at price levels with highest fill probability. Current success rate: 89%\n                        </div>\n                        <div className=\"text-xs text-green-600 mt-1\">+12% fill rate improvement</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start space-x-3 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                      <AlertCircle className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium text-sm\">Order Size Optimization</div>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          Break large orders into smaller chunks to improve queue position and reduce market impact\n                        </div>\n                        <div className=\"text-xs text-blue-600 mt-1\">Recommended max size: 75 contracts</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start space-x-3 p-4 bg-yellow-50 dark:bg-yellow-950 rounded-lg\">\n                      <Clock className=\"w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium text-sm\">Timing Optimization</div>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          Avoid high-activity periods (first 10 minutes) for better queue positions\n                        </div>\n                        <div className=\"text-xs text-yellow-600 mt-1\">-25% average queue time</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start space-x-3 p-4 bg-purple-50 dark:bg-purple-950 rounded-lg\">\n                      <Target className=\"w-5 h-5 text-purple-600 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium text-sm\">Smart Order Routing</div>\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          Route orders to venues with shorter queue times and better fill rates\n                        </div>\n                        <div className=\"text-xs text-purple-600 mt-1\">Consider dark pools for large orders</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Queue Position Prediction */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Queue Position Prediction</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* AI Prediction Chart */}\n                    <div className=\"h-64 w-full bg-white rounded border\">\n                      <svg width=\"100%\" height=\"256\" className=\"overflow-visible\">\n                        <defs>\n                          <linearGradient id=\"predictionGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\"/>\n                            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.1\"/>\n                          </linearGradient>\n                          <linearGradient id=\"confidenceGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                            <stop offset=\"0%\" stopColor=\"#10b981\" stopOpacity=\"0.2\"/>\n                            <stop offset=\"100%\" stopColor=\"#10b981\" stopOpacity=\"0.05\"/>\n                          </linearGradient>\n                        </defs>\n                        \n                        {/* Grid lines */}\n                        {[0, 1, 2, 3, 4, 5].map(i => (\n                          <g key={i}>\n                            <line \n                              x1=\"60\" \n                              y1={40 + i * 35} \n                              x2=\"500\" \n                              y2={40 + i * 35} \n                              stroke=\"#e5e7eb\" \n                              strokeWidth=\"1\"\n                            />\n                            <text x=\"45\" y={45 + i * 35} fontSize=\"10\" fill=\"#6b7280\" textAnchor=\"end\">\n                              {Math.round((5 - i) * 20)}\n                            </text>\n                          </g>\n                        ))}\n                        \n                        {/* Time axis */}\n                        {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(i => (\n                          <g key={i}>\n                            <line \n                              x1={60 + i * 55} \n                              y1=\"40\" \n                              x2={60 + i * 55} \n                              y2=\"215\" \n                              stroke=\"#e5e7eb\" \n                              strokeWidth=\"1\"\n                            />\n                            <text x={60 + i * 55} y=\"235\" fontSize=\"10\" fill=\"#6b7280\" textAnchor=\"middle\">\n                              {i * 5}s\n                            </text>\n                          </g>\n                        ))}\n                        \n                        {/* Confidence band */}\n                        <path \n                          d=\"M60,120 Q115,115 170,110 T280,105 Q335,108 390,112 T500,120 L500,140 Q445,138 390,135 T280,130 Q225,132 170,135 T60,140 Z\" \n                          fill=\"url(#confidenceGradient)\" \n                          stroke=\"none\"\n                        />\n                        \n                        {/* Historical data line */}\n                        <path \n                          d=\"M60,130 Q80,125 100,128 Q120,132 140,128 Q160,125 180,130 Q200,135 220,132 Q240,128 260,130\" \n                          fill=\"none\" \n                          stroke=\"#6b7280\" \n                          strokeWidth=\"2\"\n                          strokeDasharray=\"3,3\"\n                        />\n                        \n                        {/* AI prediction line */}\n                        <path \n                          d=\"M260,130 Q280,125 300,118 Q320,110 340,108 Q360,106 380,109 Q400,112 420,115 Q440,118 460,120 Q480,122 500,125\" \n                          fill=\"none\" \n                          stroke=\"#3b82f6\" \n                          strokeWidth=\"3\"\n                        />\n                        \n                        {/* Current position marker */}\n                        <circle cx=\"260\" cy=\"130\" r=\"4\" fill=\"#ef4444\" stroke=\"white\" strokeWidth=\"2\"/>\n                        <text x=\"260\" y=\"150\" fontSize=\"10\" fill=\"#ef4444\" textAnchor=\"middle\" fontWeight=\"bold\">\n                          Current: #47\n                        </text>\n                        \n                        {/* Prediction points */}\n                        {[\n                          { x: 340, y: 108, label: \"#25\", time: \"10s\" },\n                          { x: 420, y: 115, label: \"#18\", time: \"25s\" },\n                          { x: 500, y: 125, label: \"#12\", time: \"40s\" }\n                        ].map((point, i) => (\n                          <g key={i}>\n                            <circle cx={point.x} cy={point.y} r=\"3\" fill=\"#3b82f6\" stroke=\"white\" strokeWidth=\"1\"/>\n                            <text x={point.x} y={point.y - 8} fontSize=\"9\" fill=\"#3b82f6\" textAnchor=\"middle\" fontWeight=\"bold\">\n                              {point.label}\n                            </text>\n                          </g>\n                        ))}\n                        \n                        {/* Labels */}\n                        <text x=\"60\" y=\"25\" fontSize=\"12\" fill=\"#374151\" fontWeight=\"bold\">Queue Position</text>\n                        <text x=\"280\" y=\"255\" fontSize=\"12\" fill=\"#374151\" fontWeight=\"bold\">Time Horizon</text>\n                        \n                        {/* Legend */}\n                        <g transform=\"translate(350, 50)\">\n                          <rect x=\"0\" y=\"0\" width=\"140\" height=\"80\" fill=\"white\" stroke=\"#e5e7eb\" rx=\"4\"/>\n                          <line x1=\"10\" y1=\"15\" x2=\"25\" y2=\"15\" stroke=\"#6b7280\" strokeWidth=\"2\" strokeDasharray=\"3,3\"/>\n                          <text x=\"30\" y=\"18\" fontSize=\"9\" fill=\"#374151\">Historical</text>\n                          <line x1=\"10\" y1=\"30\" x2=\"25\" y2=\"30\" stroke=\"#3b82f6\" strokeWidth=\"3\"/>\n                          <text x=\"30\" y=\"33\" fontSize=\"9\" fill=\"#374151\">AI Prediction</text>\n                          <rect x=\"10\" y=\"40\" width=\"15\" height=\"8\" fill=\"url(#confidenceGradient)\"/>\n                          <text x=\"30\" y=\"47\" fontSize=\"9\" fill=\"#374151\">95% Confidence</text>\n                          <circle cx=\"17\" cy=\"60\" r=\"3\" fill=\"#ef4444\"/>\n                          <text x=\"30\" y=\"63\" fontSize=\"9\" fill=\"#374151\">Current Position</text>\n                        </g>\n                      </svg>\n                    </div>\n\n                    {/* AI Model Metrics */}\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div className=\"text-center p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                        <div className=\"text-lg font-bold text-blue-700\">94.2%</div>\n                        <div className=\"text-xs text-blue-600\">Prediction Accuracy</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-green-50 rounded-lg border border-green-200\">\n                        <div className=\"text-lg font-bold text-green-700\">2.3s</div>\n                        <div className=\"text-xs text-green-600\">Avg Prediction Time</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-purple-50 rounded-lg border border-purple-200\">\n                        <div className=\"text-lg font-bold text-purple-700\">87.1%</div>\n                        <div className=\"text-xs text-purple-600\">Model Confidence</div>\n                      </div>\n                    </div>\n\n                    {/* Feature Importance */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium text-gray-700\">Key Prediction Features</h4>\n                      {[\n                        { name: \"Order Book Imbalance\", value: 0.28, color: \"#3b82f6\" },\n                        { name: \"Recent Fill Rate\", value: 0.24, color: \"#10b981\" },\n                        { name: \"Time in Queue\", value: 0.19, color: \"#f59e0b\" },\n                        { name: \"Spread Dynamics\", value: 0.16, color: \"#ef4444\" },\n                        { name: \"Volume Profile\", value: 0.13, color: \"#8b5cf6\" }\n                      ].map((feature, i) => (\n                        <div key={i} className=\"flex items-center space-x-2\">\n                          <div className=\"w-20 text-xs text-gray-600 truncate\">{feature.name}</div>\n                          <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"h-2 rounded-full\" \n                              style={{ \n                                width: `${feature.value * 100}%`, \n                                backgroundColor: feature.color \n                              }}\n                            />\n                          </div>\n                          <div className=\"text-xs text-gray-500 w-8 text-right\">\n                            {Math.round(feature.value * 100)}%\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n\n                    {/* Real-time Alerts */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium text-gray-700\">AI Alerts</h4>\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center space-x-2 p-2 bg-green-50 rounded border border-green-200\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          <span className=\"text-xs text-green-800\">High probability of advancement in next 15s</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-yellow-50 rounded border border-yellow-200\">\n                          <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                          <span className=\"text-xs text-yellow-800\">Unusual order book pattern detected</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-blue-50 rounded border border-blue-200\">\n                          <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                          <span className=\"text-xs text-blue-800\">Model confidence above 85% threshold</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":35047},"client/src/components/tabs/ResultsTab.tsx":{"content":"import { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, TrendingDown, DollarSign, Target, Activity, BarChart3 } from \"lucide-react\";\n\nexport default function ResultsTab() {\n  // Performance metrics data\n  const performanceMetrics = {\n    totalReturn: 15.4,\n    sharpeRatio: 1.82,\n    maxDrawdown: -3.2,\n    winRate: 67.3,\n    profitFactor: 1.45,\n    averageWin: 125.50,\n    averageLoss: -85.20,\n    totalTrades: 847,\n    winningTrades: 570,\n    losingTrades: 277\n  };\n\n  // Equity curve data points\n  const equityCurveData = Array.from({ length: 100 }, (_, i) => ({\n    x: i,\n    equity: 100000 + (i * 150) + Math.sin(i * 0.1) * 1000 + Math.random() * 500 - 250,\n    drawdown: Math.max(-5, Math.sin(i * 0.15) * 3 + Math.random() * 1 - 0.5)\n  }));\n\n  // Monthly returns data\n  const monthlyReturns = [\n    { month: \"Jan\", return: 2.3 },\n    { month: \"Feb\", return: -0.8 },\n    { month: \"Mar\", return: 4.1 },\n    { month: \"Apr\", return: 1.7 },\n    { month: \"May\", return: 3.2 },\n    { month: \"Jun\", return: -1.2 },\n    { month: \"Jul\", return: 2.8 },\n    { month: \"Aug\", return: 5.1 },\n    { month: \"Sep\", return: -0.5 },\n    { month: \"Oct\", return: 3.6 },\n    { month: \"Nov\", return: 2.1 },\n    { month: \"Dec\", return: 1.8 }\n  ];\n\n  return (\n    <div className=\"flex flex-1 flex-col\">\n      <div className=\"p-4 border-b border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold\">Performance Analytics</h3>\n          <div className=\"flex space-x-2\">\n            <Button size=\"sm\" variant=\"outline\">Export PDF</Button>\n            <Button size=\"sm\" variant=\"outline\">Export CSV</Button>\n            <Button size=\"sm\">Generate Report</Button>\n          </div>\n        </div>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4\">\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"charts\">Charts</TabsTrigger>\n              <TabsTrigger value=\"trades\">Trade Analysis</TabsTrigger>\n              <TabsTrigger value=\"risk\">Risk Metrics</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              {/* Key Performance Metrics */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Return</CardTitle>\n                    <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-600\">+{performanceMetrics.totalReturn}%</div>\n                    <p className=\"text-xs text-muted-foreground\">vs benchmark +8.2%</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Sharpe Ratio</CardTitle>\n                    <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{performanceMetrics.sharpeRatio}</div>\n                    <p className=\"text-xs text-muted-foreground\">Risk-adjusted return</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Max Drawdown</CardTitle>\n                    <TrendingDown className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-red-600\">{performanceMetrics.maxDrawdown}%</div>\n                    <p className=\"text-xs text-muted-foreground\">Peak to trough</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Win Rate</CardTitle>\n                    <Target className=\"h-4 w-4 text-muted-foreground\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\">{performanceMetrics.winRate}%</div>\n                    <p className=\"text-xs text-muted-foreground\">{performanceMetrics.winningTrades}/{performanceMetrics.totalTrades} trades</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Equity Curve Visualization */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Equity Curve</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 w-full bg-muted rounded-lg flex items-center justify-center relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                      <defs>\n                        <linearGradient id=\"equityGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                          <stop offset=\"0%\" style={{ stopColor: '#10b981', stopOpacity: 0.3 }} />\n                          <stop offset=\"100%\" style={{ stopColor: '#10b981', stopOpacity: 0 }} />\n                        </linearGradient>\n                      </defs>\n                      \n                      {/* Equity curve path */}\n                      <path\n                        d={`M 0 ${200 - (equityCurveData[0].equity - 100000) / 1000} ${equityCurveData.map((point, i) => \n                          `L ${(i / equityCurveData.length) * 800} ${200 - (point.equity - 100000) / 1000}`\n                        ).join(' ')}`}\n                        stroke=\"#10b981\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                      />\n                      \n                      {/* Fill area under curve */}\n                      <path\n                        d={`M 0 ${200 - (equityCurveData[0].equity - 100000) / 1000} ${equityCurveData.map((point, i) => \n                          `L ${(i / equityCurveData.length) * 800} ${200 - (point.equity - 100000) / 1000}`\n                        ).join(' ')} L 800 200 L 0 200 Z`}\n                        fill=\"url(#equityGradient)\"\n                      />\n\n                      {/* Grid lines */}\n                      {[0, 1, 2, 3, 4].map(i => (\n                        <line key={i} x1=\"0\" y1={i * 50} x2=\"800\" y2={i * 50} stroke=\"#374151\" strokeWidth=\"0.5\" opacity=\"0.3\" />\n                      ))}\n                    </svg>\n                    <div className=\"absolute bottom-2 left-2 text-xs text-muted-foreground\">\n                      Portfolio Value: $115,400 (+15.4%)\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Monthly Returns */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Monthly Returns</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {monthlyReturns.map((month) => (\n                      <div key={month.month} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium w-12\">{month.month}</span>\n                        <div className=\"flex-1 mx-3\">\n                          <Progress \n                            value={Math.abs(month.return) * 10} \n                            className=\"h-2\"\n                          />\n                        </div>\n                        <span className={`text-sm font-mono w-16 text-right ${\n                          month.return >= 0 ? 'text-green-600' : 'text-red-600'\n                        }`}>\n                          {month.return >= 0 ? '+' : ''}{month.return}%\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"charts\" className=\"space-y-4\">\n              {/* Price & Signal Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Price Action & Signals</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80 w-full bg-muted rounded-lg flex items-center justify-center relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                      {/* Candlestick chart simulation */}\n                      {Array.from({ length: 50 }, (_, i) => {\n                        const open = 4150 + Math.sin(i * 0.1) * 50 + Math.random() * 20;\n                        const close = open + (Math.random() - 0.5) * 30;\n                        const high = Math.max(open, close) + Math.random() * 15;\n                        const low = Math.min(open, close) - Math.random() * 15;\n                        const x = (i / 50) * 800;\n                        const isGreen = close > open;\n                        \n                        return (\n                          <g key={i}>\n                            {/* High-Low line */}\n                            <line \n                              x1={x} y1={(4200 - high) / 200 * 300} \n                              x2={x} y2={(4200 - low) / 200 * 300}\n                              stroke={isGreen ? \"#10b981\" : \"#ef4444\"} \n                              strokeWidth=\"1\"\n                            />\n                            {/* Body */}\n                            <rect \n                              x={x - 3} \n                              y={(4200 - Math.max(open, close)) / 200 * 300}\n                              width=\"6\" \n                              height={Math.abs(close - open) / 200 * 300}\n                              fill={isGreen ? \"#10b981\" : \"#ef4444\"}\n                            />\n                            {/* Buy/Sell signals */}\n                            {Math.random() > 0.9 && (\n                              <circle \n                                cx={x} \n                                cy={(4200 - low) / 200 * 300 + 10}\n                                r=\"3\" \n                                fill={Math.random() > 0.5 ? \"#10b981\" : \"#ef4444\"}\n                              />\n                            )}\n                          </g>\n                        );\n                      })}\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Volume Profile */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Volume Profile</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-48 w-full bg-muted rounded-lg flex items-center justify-center\">\n                    <div className=\"text-muted-foreground\">Volume distribution by price level</div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"trades\" className=\"space-y-4\">\n              {/* Trade Statistics */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm\">Average Win</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-xl font-bold text-green-600\">\n                      ${performanceMetrics.averageWin}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm\">Average Loss</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-xl font-bold text-red-600\">\n                      ${performanceMetrics.averageLoss}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm\">Profit Factor</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-xl font-bold\">\n                      {performanceMetrics.profitFactor}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Recent Trades Table */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Trades</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"grid grid-cols-6 text-xs font-medium text-muted-foreground border-b pb-2\">\n                      <span>Time</span>\n                      <span>Side</span>\n                      <span>Price</span>\n                      <span>Quantity</span>\n                      <span>PnL</span>\n                      <span>Queue Pos</span>\n                    </div>\n                    {Array.from({ length: 10 }, (_, i) => (\n                      <div key={i} className=\"grid grid-cols-6 text-xs py-1 border-b border-border\">\n                        <span className=\"font-mono\">14:23:{String(45 - i).padStart(2, '0')}</span>\n                        <span className={i % 3 === 0 ? \"text-red-600\" : \"text-green-600\"}>\n                          {i % 3 === 0 ? \"SELL\" : \"BUY\"}\n                        </span>\n                        <span className=\"font-mono\">4,{150 + i * 2}.{25 + i % 4 * 25}</span>\n                        <span>{50 + i * 10}</span>\n                        <span className={`font-mono ${i % 2 === 0 ? \"text-green-600\" : \"text-red-600\"}`}>\n                          {i % 2 === 0 ? \"+\" : \"-\"}${(Math.random() * 200 + 50).toFixed(2)}\n                        </span>\n                        <span className=\"font-mono\">{Math.floor(Math.random() * 5) + 1}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"risk\" className=\"space-y-4\">\n              {/* Risk Metrics */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Value at Risk (VaR)</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm\">1-day VaR (95%)</span>\n                        <span className=\"font-mono text-red-600\">-$2,450</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm\">1-day VaR (99%)</span>\n                        <span className=\"font-mono text-red-600\">-$3,820</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm\">Expected Shortfall</span>\n                        <span className=\"font-mono text-red-600\">-$4,150</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Risk Attribution</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm\">Market Risk</span>\n                        <span className=\"font-mono\">68.3%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm\">Model Risk</span>\n                        <span className=\"font-mono\">18.7%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-sm\">Execution Risk</span>\n                        <span className=\"font-mono\">13.0%</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Drawdown Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Drawdown Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-48 w-full bg-muted rounded-lg flex items-center justify-center relative overflow-hidden\">\n                    <svg width=\"100%\" height=\"100%\" className=\"absolute inset-0\">\n                      <path\n                        d={`M 0 20 ${equityCurveData.map((point, i) => \n                          `L ${(i / equityCurveData.length) * 800} ${20 - point.drawdown * 30}`\n                        ).join(' ')}`}\n                        stroke=\"#ef4444\"\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                      />\n                      <path\n                        d={`M 0 20 ${equityCurveData.map((point, i) => \n                          `L ${(i / equityCurveData.length) * 800} ${20 - point.drawdown * 30}`\n                        ).join(' ')} L 800 20 L 0 20 Z`}\n                        fill=\"rgba(239, 68, 68, 0.2)\"\n                      />\n                    </svg>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}","size_bytes":18373},"client/src/components/tabs/StrategyTab.tsx":{"content":"import CodeEditor from \"@/components/CodeEditor\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport StrategySelector from \"@/components/StrategySelector\";\n\nexport default function StrategyTab() {\n  const sampleStrategy = `// Strategy: Maker Queue Aware\n// Author: Trading Team\n// Last Modified: 2025-01-15 14:25 PST\n\nfunction onMarketData(book, trades) {\n  const imbalance = calculateImbalance(book);\n  const churnRising = isChurnRising(trades);\n  \n  if (imbalance > 0.6 && churnRising) {\n    joinBid(book.bestBid, 1);\n  } else if (imbalance < -0.6 && churnRising) {\n    joinAsk(book.bestAsk, 1);\n  }\n  \n  // Risk management\n  if (getPosition() > maxPosition) {\n    reducePosition();\n  }\n}\n\nfunction calculateImbalance(book) {\n  const bidSize = book.bids.reduce((sum, level) => sum + \n    level.size, 0);\n  const askSize = book.asks.reduce((sum, level) => sum + \n    level.size, 0);\n  \n  return (bidSize - askSize) / (bidSize + askSize);\n}`;\n\n  return (\n    <div className=\"flex flex-1 flex-col\">\n      <StrategySelector />\n      \n      <div className=\"flex flex-1\">\n        {/* Code Editor */}\n        <div className=\"flex-1 bg-card border-r border-border\">\n        <div className=\"p-3 border-b border-border bg-muted flex justify-between items-center\">\n          <h4 className=\"font-semibold\">Strategy Code</h4>\n          <div className=\"space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">Validate</Button>\n            <Button variant=\"outline\" size=\"sm\">Save</Button>\n            <Button size=\"sm\">Compile</Button>\n          </div>\n        </div>\n        \n        <CodeEditor value={sampleStrategy} />\n      </div>\n\n      {/* Strategy Configuration */}\n      <div className=\"w-80 bg-card flex flex-col\">\n        <div className=\"p-3 border-b border-border bg-muted\">\n          <h4 className=\"font-semibold\">Strategy Configuration</h4>\n        </div>\n        \n        <ScrollArea className=\"flex-1\">\n          <div className=\"p-4 space-y-6\">\n          {/* Strategy Metadata */}\n          <div>\n            <h5 className=\"font-medium mb-3\">Strategy Metadata</h5>\n            <div className=\"space-y-3\">\n              <div>\n                <Label className=\"text-sm\">Strategy Name</Label>\n                <Input defaultValue=\"Maker Queue Aware\" className=\"mt-1\" />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Author</Label>\n                <Input defaultValue=\"Trading Team\" className=\"mt-1\" />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Version</Label>\n                <Input defaultValue=\"1.2.0\" className=\"mt-1\" />\n              </div>\n            </div>\n          </div>\n          \n          {/* Strategy Parameters */}\n          <div>\n            <h5 className=\"font-medium mb-3\">Strategy Parameters</h5>\n            <div className=\"space-y-3\">\n              <div>\n                <Label className=\"text-sm\">Signal Threshold</Label>\n                <Input type=\"number\" defaultValue=\"0.001\" step=\"0.0001\" className=\"mt-1\" />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Max Position Size</Label>\n                <Input type=\"number\" defaultValue=\"1000\" className=\"mt-1\" />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Risk Limit (%)</Label>\n                <Input type=\"number\" defaultValue=\"2.0\" step=\"0.1\" className=\"mt-1\" />\n              </div>\n              <div>\n                <Label className=\"text-sm\">Lookback Window</Label>\n                <Input type=\"number\" defaultValue=\"50\" className=\"mt-1\" />\n              </div>\n            </div>\n          </div>\n          \n          {/* Compilation Status */}\n          <div>\n            <h5 className=\"font-medium mb-3\">Compilation Status</h5>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Status:</span>\n                <span className=\"text-green-600 font-mono\">✓ Valid</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Last Compiled:</span>\n                <span className=\"font-mono\">2 min ago</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Functions Found:</span>\n                <span className=\"font-mono\">3</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Est. Memory:</span>\n                <span className=\"font-mono\">1.2 MB</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Performance Hints */}\n          <div>\n            <h5 className=\"font-medium mb-3\">Performance Hints</h5>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"p-2 bg-muted rounded\">\n                <div className=\"font-medium\">✓ Good</div>\n                <div className=\"text-muted-foreground\">Efficient market data handling</div>\n              </div>\n              <div className=\"p-2 bg-yellow-50 border border-yellow-200 rounded\">\n                <div className=\"font-medium\">⚠ Warning</div>\n                <div className=\"text-muted-foreground\">Consider limiting console.log calls</div>\n              </div>\n            </div>\n          </div>\n          </div>\n        </ScrollArea>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5809},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1051},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":790},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}